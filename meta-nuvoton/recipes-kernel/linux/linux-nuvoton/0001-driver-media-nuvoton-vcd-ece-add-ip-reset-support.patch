From 527e887c8ba62c57eb7fcad851b445acb7e24a76 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Fri, 3 Sep 2021 13:03:35 +0800
Subject: [PATCH] driver: media: nuvoton: vcd/ece: add ip reset support

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 arch/arm/boot/dts/nuvoton-common-npcm7xx.dtsi |  2 ++
 .../dts/nuvoton/nuvoton-common-npcm8xx.dtsi   |  2 ++
 drivers/media/platform/nuvoton/npcm750_ece.c  | 18 ++++++++++++++++
 drivers/media/platform/nuvoton/npcm750_vcd.c  | 21 +++++++++++++++++++
 4 files changed, 43 insertions(+)

diff --git a/arch/arm/boot/dts/nuvoton-common-npcm7xx.dtsi b/arch/arm/boot/dts/nuvoton-common-npcm7xx.dtsi
index 02fe03e9ab45..849fde9a6233 100644
--- a/arch/arm/boot/dts/nuvoton-common-npcm7xx.dtsi
+++ b/arch/arm/boot/dts/nuvoton-common-npcm7xx.dtsi
@@ -280,6 +280,7 @@ vcd: vcd@f0810000 {
 			compatible = "nuvoton,npcm750-vcd";
 			reg = <0xf0810000 0x10000>;
 			interrupts = <GIC_SPI 22 IRQ_TYPE_LEVEL_HIGH>;
+			resets = <&rstc NPCM7XX_RESET_IPSRST2 NPCM7XX_RESET_VCD>;
 			status = "disabled";
 			gcr-syscon = <&gcr>;
 			gfxi-syscon = <&gfxi>;
@@ -289,6 +290,7 @@ ece: ece@f0820000 {
 			compatible = "nuvoton,npcm750-ece";
 			reg = <0xf0820000 0x2000>;
 			interrupts = <GIC_SPI 24 IRQ_TYPE_LEVEL_HIGH>;
+			resets = <&rstc NPCM7XX_RESET_IPSRST2 NPCM7XX_RESET_ECE>;
 			status = "disabled";
 		};
 
diff --git a/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi b/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
index bc73a7859ca9..686629a20cee 100644
--- a/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
+++ b/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
@@ -316,6 +316,7 @@ vcd: vcd@f0810000 {
 			compatible = "nuvoton,npcm845-vcd";
 			reg = <0x0 0xf0810000 0x0 0x10000>;
 			interrupts = <GIC_SPI 22 IRQ_TYPE_LEVEL_HIGH>;
+			resets = <&rstc NPCM8XX_RESET_IPSRST2 NPCM8XX_RESET_VCD>;
 			status = "disabled";
 			gcr-syscon = <&gcr>;
 			gfxi-syscon = <&gfxi>;
@@ -325,6 +326,7 @@ ece: ece@f0820000 {
 			compatible = "nuvoton,npcm845-ece";
 			reg = <0x0 0xf0820000 0x0 0x2000>;
 			interrupts = <GIC_SPI 24 IRQ_TYPE_LEVEL_HIGH>;
+			resets = <&rstc NPCM8XX_RESET_IPSRST2 NPCM8XX_RESET_ECE>;
 			status = "disabled";
 		};
 
diff --git a/drivers/media/platform/nuvoton/npcm750_ece.c b/drivers/media/platform/nuvoton/npcm750_ece.c
index 37b997e70681..5af5edf0625c 100644
--- a/drivers/media/platform/nuvoton/npcm750_ece.c
+++ b/drivers/media/platform/nuvoton/npcm750_ece.c
@@ -29,6 +29,7 @@
 #include <asm/fb.h>
 #include <linux/regmap.h>
 #include <linux/miscdevice.h>
+#include <linux/reset.h>
 
 #define ECE_VERSION "1.0.0"
 
@@ -122,8 +123,17 @@ struct npcm750_ece {
 	atomic_t clients;
 	int irq;
 	struct completion complete;
+	struct reset_control *reset;
 };
 
+static void npcm750_ece_ip_reset(struct npcm750_ece *priv)
+{
+	reset_control_assert(priv->reset);
+	msleep(100);
+	reset_control_deassert(priv->reset);
+	msleep(100);
+}
+
 /* Clear Offset of Compressed Rectangle*/
 static void npcm750_ece_clear_rect_offset(struct npcm750_ece *priv)
 {
@@ -280,6 +290,8 @@ static void npcm750_ece_reset(struct npcm750_ece *priv)
 /* Initialise the ECE block and interface library */
 static int npcm750_ece_init(struct npcm750_ece *priv)
 {
+	npcm750_ece_ip_reset(priv);
+
 	npcm750_ece_reset(priv);
 
 	npcm750_ece_set_enc_dba(priv, priv->dma);
@@ -627,6 +639,12 @@ static int npcm750_ece_probe(struct platform_device *pdev)
 		goto err;
 	}
 
+	priv->reset = devm_reset_control_get(&pdev->dev, NULL);
+	if (IS_ERR(priv->reset)) {
+		ret = PTR_ERR(priv->reset);
+		goto err;
+	}
+
 	ret = npcm750_ece_device_create(priv);
 	if (ret) {
 		dev_err(dev, "%s: failed to create device\n",
diff --git a/drivers/media/platform/nuvoton/npcm750_vcd.c b/drivers/media/platform/nuvoton/npcm750_vcd.c
index 5c9a3850542c..dec0d1ad4115 100644
--- a/drivers/media/platform/nuvoton/npcm750_vcd.c
+++ b/drivers/media/platform/nuvoton/npcm750_vcd.c
@@ -32,6 +32,7 @@
 #include <asm/fb.h>
 #include <linux/completion.h>
 #include <linux/miscdevice.h>
+#include <linux/reset.h>
 
 #define VCD_VERSION "1.0.0"
 
@@ -399,6 +400,7 @@ struct npcm750_vcd {
 	struct completion complete;
 	u32 hortact;
 	wait_queue_head_t wait;
+	struct reset_control *reset;
 };
 
 typedef struct
@@ -447,6 +449,14 @@ static const res_tlb res_tlbs[] = {
 
 static const size_t restlb_cnt = sizeof(res_tlbs) / sizeof(res_tlb);
 
+static void npcm750_vcd_ip_reset(struct npcm750_vcd *priv)
+{
+	reset_control_assert(priv->reset);
+	msleep(100);
+	reset_control_deassert(priv->reset);
+	msleep(100);
+}
+
 static u32 npcm750_vcd_get_gmmap(struct npcm750_vcd *priv)
 {
 	struct regmap *gcr = priv->gcr_regmap;
@@ -1140,9 +1150,14 @@ static int npcm750_vcd_init(struct npcm750_vcd *priv)
 	/* Select KVM GFX input */
 	regmap_update_bits(gcr, MFSEL1, MFSEL1_DVH1SEL, (u32)~MFSEL1_DVH1SEL);
 
+	/* IP Reset */
+	npcm750_vcd_ip_reset(priv);
+
+	/* Check VCD if ready */
 	if (npcm750_vcd_ready(priv))
 		return	-ENODEV;
 
+	/* VCD/GFX Moudle reset */
 	npcm750_vcd_reset(priv);
 
 	/* Initialise capture resolution to a non-zero value */
@@ -1735,6 +1750,12 @@ static int npcm750_vcd_probe(struct platform_device *pdev)
 		goto err;
 	}
 
+	priv->reset = devm_reset_control_get(&pdev->dev, NULL);
+	if (IS_ERR(priv->reset)) {
+		ret = PTR_ERR(priv->reset);
+		goto err;
+	}
+
 	ret = npcm750_vcd_device_create(priv);
 	if (ret) {
 		dev_err(dev, "%s: failed to create device\n",
-- 
2.25.1

