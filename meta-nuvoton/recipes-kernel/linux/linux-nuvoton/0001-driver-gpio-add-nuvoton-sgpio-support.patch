From 0a137a41c4b34bebed05c6f6fd653d579e2629f5 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Mon, 16 Aug 2021 12:08:47 +0800
Subject: [PATCH] driver: gpio: add nuvoton sgpio support

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 .../dts/nuvoton/nuvoton-common-npcm8xx.dtsi   |  20 +
 .../boot/dts/nuvoton/nuvoton-npcm845-evb.dts  |  16 +
 drivers/gpio/Kconfig                          |   8 +
 drivers/gpio/Makefile                         |   1 +
 drivers/gpio/gpio-npcm-sgpio.c                | 388 ++++++++++++++++++
 5 files changed, 433 insertions(+)
 create mode 100644 drivers/gpio/gpio-npcm-sgpio.c

diff --git a/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi b/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
index 059c51781e03..72273b19d14f 100644
--- a/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
+++ b/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
@@ -1049,6 +1049,26 @@ gfxi: gfxi@e000 {
 						"simple-mfd";
 				reg = <0xe000 0x100>;
 			};
+			sgpio1: sgpio@101000 {
+				clocks = <&clk NPCM8XX_CLK_APB3>;
+				compatible = "nuvoton,npcm845-sgpio";
+				bus-frequency = <16000000>;
+				gpio-controller;
+				pinctrl-names = "default";
+				pinctrl-0 = <&iox1_pins>;
+				reg = <0x101000 0x200>;
+				status = "disabled";
+			};
+			sgpio2: sgpio@102000 {
+				clocks = <&clk NPCM8XX_CLK_APB3>;
+				compatible = "nuvoton,npcm845-sgpio";
+				bus-frequency = <16000000>;
+				gpio-controller;
+				pinctrl-names = "default";
+				pinctrl-0 = <&iox2_pins>;
+				reg = <0x102000 0x200>;
+				status = "disabled";
+			};
 		};
 	};
 
diff --git a/arch/arm64/boot/dts/nuvoton/nuvoton-npcm845-evb.dts b/arch/arm64/boot/dts/nuvoton/nuvoton-npcm845-evb.dts
index 1f80c13e1a25..c52c19c38966 100644
--- a/arch/arm64/boot/dts/nuvoton/nuvoton-npcm845-evb.dts
+++ b/arch/arm64/boot/dts/nuvoton/nuvoton-npcm845-evb.dts
@@ -511,6 +511,22 @@ i3c1: i3c@fff11000 {
 				i2c-scl-hz = <400000>;
 				i3c-scl-hz = <4000000>;
 			};
+
+			sgpio1: sgpio@101000 {
+				status = "okay";
+				bus-frequency = <16000000>;
+				nin_gpios = <64>;
+				nout_gpios = <64>;
+				gpio-line-names="s1a","s2a","s3a","s4a","s5a","s6a","s7a","s8a";
+			};
+
+			sgpio2: sgpio@102000 {
+				status = "okay";
+				bus-frequency = <16000000>;
+				nin_gpios = <64>;
+				nout_gpios = <64>;
+				gpio-line-names="s1","s2","s3","s4","s5","s6","s7","s8";
+			};
 		};
 	};
 
diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index f20ac3d69424..7658e73ac45b 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -1517,6 +1517,14 @@ config GPIO_SODAVILLE
 	help
 	  Say Y here to support Intel Sodaville GPIO.
 
+config GPIO_NUVOTON_SGPIO
+	bool "Nuvoton SGPIO support"
+	depends on (ARCH_NPCM || COMPILE_TEST) && OF_GPIO
+	select GPIO_GENERIC
+	select GPIOLIB_IRQCHIP
+	help
+	  Say Y here to support Nuvoton NPCM7XX/NPCM8XX SGPIO functionality.
+
 endmenu
 
 menu "SPI GPIO expanders"
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
index 09dada80ac34..1c557095e0a6 100644
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -180,3 +180,4 @@ obj-$(CONFIG_GPIO_XTENSA)		+= gpio-xtensa.o
 obj-$(CONFIG_GPIO_ZEVIO)		+= gpio-zevio.o
 obj-$(CONFIG_GPIO_ZX)			+= gpio-zx.o
 obj-$(CONFIG_GPIO_ZYNQ)			+= gpio-zynq.o
+obj-$(CONFIG_GPIO_NUVOTON_SGPIO)		+= gpio-npcm-sgpio.o
diff --git a/drivers/gpio/gpio-npcm-sgpio.c b/drivers/gpio/gpio-npcm-sgpio.c
new file mode 100644
index 000000000000..778afb44940f
--- /dev/null
+++ b/drivers/gpio/gpio-npcm-sgpio.c
@@ -0,0 +1,388 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright 2019 American Megatrends International LLC.
+ *
+ * Author: Karthikeyan Mani <karthikeyanm@amiindia.co.in>
+ */
+
+#include <linux/bitfield.h>
+#include <linux/clk.h>
+#include <linux/gpio/driver.h>
+#include <linux/hashtable.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/spinlock.h>
+#include <linux/string.h>
+
+/*
+ * MAX_NR_HW_GPIO represents the number of actual hardware-supported GPIOs (ie,
+ * slots within the clocked serial GPIO data). Since each HW GPIO is both an
+ * input and an output, we provide MAX_NR_HW_GPIO * 2 lines on our gpiochip
+ * device.
+ *
+ * We use SGPIO_OUTPUT_OFFSET to define the split between the inputs and
+ * outputs; the inputs start at line 0, the outputs start at OUTPUT_OFFSET.
+ */
+#define MAX_NR_HW_SGPIO			64
+#define SGPIO_OUTPUT_OFFSET		MAX_NR_HW_SGPIO
+
+
+#define NUVOTON_SGPIO_CLK		0x2A
+#define NUVOTON_SGPIO_CFG2		0x2B
+#define NUVOTON_SGPIO_EVENT_STATUS		0x20
+#define NUVOTON_SGPIO_EVENT		0x10
+
+
+struct nuvoton_sgpio {
+	struct gpio_chip chip;
+	struct clk *pclk;
+	spinlock_t lock;
+	void __iomem *base;
+	int n_sgpio;
+	int nin_sgpio;
+	int nout_sgpio;
+	int in_port;
+	int out_port;
+};
+
+struct nuvoton_sgpio_bank {
+	uint16_t    xif1_offset;
+	uint8_t    rdata_reg;
+	uint8_t    wdata_reg;
+	uint8_t    event_config;
+	uint8_t    event_status;
+	uint8_t    module_enable;
+};
+enum nuvoton_sgpio_reg {
+	rdata_reg,
+	wdata_reg,
+	event_config,
+	event_status,
+	module_enable,
+};
+static const struct nuvoton_sgpio_bank nuvoton_sgpio_banks[] = {
+	{
+		.rdata_reg = 0x08,
+		.wdata_reg = 0x00,
+		.event_config = 0x10,
+		.event_status = 0x20,
+		.module_enable = 0x28,
+	},
+	{
+		.rdata_reg = 0x09,
+		.wdata_reg = 0x01,
+		.event_config = 0x12,
+		.event_status = 0x21,
+		.module_enable = 0x28,
+	},
+	{
+		.rdata_reg = 0x0a,
+		.wdata_reg = 0x02,
+		.event_config = 0x14,
+		.event_status = 0x22,
+		.module_enable = 0x28,
+	},
+	{
+		.rdata_reg = 0x0b,
+		.wdata_reg = 0x03,
+		.event_config = 0x16,
+		.event_status = 0x23,
+		.module_enable = 0x28,
+	},
+	{
+		.rdata_reg = 0x0c,
+		.wdata_reg = 0x04,
+		.event_config = 0x18,
+		.event_status = 0x24,
+		.module_enable = 0x28,
+	},
+	{
+		.rdata_reg = 0x0d,
+		.wdata_reg = 0x05,
+		.event_config = 0x1a,
+		.event_status = 0x25,
+		.module_enable = 0x28,
+	},
+	{
+		.rdata_reg = 0x0e,
+		.wdata_reg = 0x06,
+		.event_config = 0x1c,
+		.event_status = 0x26,
+		.module_enable = 0x28,
+	},
+	{
+		.rdata_reg = 0x0f,
+		.wdata_reg = 0x07,
+		.event_config = 0x1e,
+		.event_status = 0x27,
+		.module_enable = 0x28,
+	},
+
+};
+static void __iomem *bank_reg(struct nuvoton_sgpio *gpio,
+				     const struct nuvoton_sgpio_bank *bank,
+				     const enum nuvoton_sgpio_reg reg)
+{
+	switch (reg) {
+	case rdata_reg:
+		return gpio->base + bank->rdata_reg;
+	case wdata_reg:
+		return gpio->base + bank->wdata_reg;
+	case event_config:
+		return gpio->base + bank->event_config;
+	case event_status:
+		return gpio->base + bank->event_status;
+	case module_enable:
+		return gpio->base + bank->module_enable;
+	default:
+		/* acturally if code runs to here, it's an error case */
+		BUG();
+	}
+	
+}
+
+static int sgpio_set_value(struct gpio_chip *gc, unsigned int offset, int val)
+{
+	
+	return 0;
+	
+}
+
+static int nuvoton_sgpio_init_valid_mask(struct gpio_chip *gc,
+		unsigned long *valid_mask, unsigned int ngpios)
+{
+	struct nuvoton_sgpio *sgpio = gpiochip_get_data(gc);
+	char in_port,out_port;
+	char set_port;
+	
+	if(sgpio->nin_sgpio % 8 >0)
+		in_port= sgpio->nin_sgpio/8 + 1;
+	else
+		in_port= sgpio->nin_sgpio/8;
+	
+	if(sgpio->nout_sgpio % 8 >0)
+		out_port=sgpio->nout_sgpio/8 +1;
+	else
+		out_port=sgpio->nout_sgpio/8;
+	
+	sgpio->in_port=in_port;
+	sgpio->out_port=out_port;
+	set_port = ((out_port & 0xF ) << 4) | (in_port & 0xF );
+	
+	
+	iowrite8(set_port, sgpio->base + NUVOTON_SGPIO_CFG2);
+
+	return 0;
+	
+}
+static int nuvoton_sgpio_dir_in(struct gpio_chip *gc, unsigned int offset)
+{
+	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
+	unsigned long flags;
+	int rc;
+	
+	if(offset > gpio->nout_sgpio)
+	{
+		
+		return 0;
+	}
+	else
+	{
+		
+		return -EINVAL;
+	}	
+}
+
+static int nuvoton_sgpio_dir_out(struct gpio_chip *gc, unsigned int offset, int val)
+{
+	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
+	unsigned long flags;
+	int rc;
+	
+	if(offset < gpio->nout_sgpio)
+	{
+		
+		return 0;
+	}
+	else
+	{
+		
+		return -EINVAL;
+	}
+}
+
+static int nuvoton_sgpio_get_direction(struct gpio_chip *gc, unsigned int offset)
+{
+	struct nuvoton_sgpio *sgpio = gpiochip_get_data(gc);
+	
+	if(offset < sgpio->nout_sgpio)
+		return 0;
+	else
+		return 1;
+}
+
+static void nuvoton_sgpio_set(struct gpio_chip *gc, unsigned int offset, int val)
+{
+	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
+	const struct  nuvoton_sgpio_bank *bank = &nuvoton_sgpio_banks[offset/8];
+	void __iomem *addr_r, *addr_w;
+	u8 reg=0;
+	
+	addr_r = bank_reg(gpio, bank, wdata_reg);
+	reg = ioread8(addr_r);
+	
+	if(val)
+	{
+		reg |= (val << (offset%8) );
+		iowrite8(reg,addr_r);
+	}
+	else
+	{
+		reg &= ~(1 << (offset%8));
+		iowrite8(reg,addr_r);
+	}
+	
+}
+
+static int nuvoton_sgpio_get(struct gpio_chip *gc, unsigned int offset)
+{
+	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
+	void __iomem *addr_r, *addr_w;
+	int dir,temp;
+	u8 reg=0;
+	
+	dir=nuvoton_sgpio_get_direction(gc,offset);
+	if(dir==0)
+	{
+		const struct  nuvoton_sgpio_bank *bank = &nuvoton_sgpio_banks[offset/8];
+		addr_r=bank_reg(gpio, bank, wdata_reg);
+		reg = ioread8(addr_r);
+		reg = (reg >> (offset%8)) & 0x01;
+	}
+	else
+	{
+		temp=offset - gpio->nout_sgpio;
+		const struct  nuvoton_sgpio_bank *bank = &nuvoton_sgpio_banks[temp/8];
+		addr_r=bank_reg(gpio, bank, rdata_reg);
+		reg = ioread8(addr_r);
+		reg = (reg >> (temp%8)) & 0x01;
+	}
+	
+	
+	
+	return reg;
+}
+
+
+
+static const struct of_device_id nuvoton_sgpio_of_table[] = {
+	{ .compatible = "nuvoton,npcm7xx-sgpio" },
+	{ .compatible = "nuvoton,npcm845-sgpio" },
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, nuvoton_sgpio_of_table);
+
+static int __init nuvoton_sgpio_probe(struct platform_device *pdev)
+{
+	struct nuvoton_sgpio *gpio;
+	u32 nin_gpios,nout_gpios, sgpio_freq, sgpio_clk_div;
+	int rc;
+	unsigned long apb_freq;
+	 
+	
+	gpio = devm_kzalloc(&pdev->dev, sizeof(*gpio), GFP_KERNEL);
+	if (!gpio)
+		return -ENOMEM;
+	
+	
+	gpio->base = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(gpio->base))
+		return PTR_ERR(gpio->base);
+	
+	rc = of_property_read_u32(pdev->dev.of_node, "nin_gpios", &nin_gpios);
+	if (rc < 0) {
+		dev_err(&pdev->dev, "Could not read ngpios property\n");
+		return -EINVAL;
+	}
+	rc = of_property_read_u32(pdev->dev.of_node, "nout_gpios", &nout_gpios);
+	if (rc < 0) {
+		dev_err(&pdev->dev, "Could not read ngpios property\n");
+		return -EINVAL;
+	}
+	gpio->n_sgpio = nin_gpios + nout_gpios;
+	gpio->nin_sgpio = nin_gpios;
+	gpio->nout_sgpio = nout_gpios;
+	
+	rc = of_property_read_u32(pdev->dev.of_node, "bus-frequency", &sgpio_freq);
+	if (rc < 0) {
+		dev_err(&pdev->dev, "Could not read bus-frequency property\n");
+		return -EINVAL;
+	}
+	
+	gpio->pclk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(gpio->pclk)) {
+		dev_err(&pdev->dev, "devm_clk_get failed\n");
+		return PTR_ERR(gpio->pclk);
+	}
+	
+	apb_freq = clk_get_rate(gpio->pclk);
+	if (sgpio_freq == 0)
+		return -EINVAL;
+	
+	
+	sgpio_clk_div = (apb_freq /sgpio_freq )+1;
+	
+	if(sgpio_clk_div == 2)
+		iowrite8(0x0E , gpio->base + NUVOTON_SGPIO_CLK);
+	else if(sgpio_clk_div == 3)
+		iowrite8(0x0D , gpio->base + NUVOTON_SGPIO_CLK);
+	else if(sgpio_clk_div == 4)
+		iowrite8(0x0C , gpio->base + NUVOTON_SGPIO_CLK);
+	else if(sgpio_clk_div == 8)
+		iowrite8(0x07 , gpio->base + NUVOTON_SGPIO_CLK);
+	else if(sgpio_clk_div == 32)
+		iowrite8(0x05 , gpio->base + NUVOTON_SGPIO_CLK);
+	else
+		return -EINVAL;
+	
+	spin_lock_init(&gpio->lock);
+	gpio->chip.parent = &pdev->dev;
+	gpio->chip.ngpio = nin_gpios + nout_gpios ;
+	gpio->chip.init_valid_mask = nuvoton_sgpio_init_valid_mask;
+	gpio->chip.direction_input = nuvoton_sgpio_dir_in;
+	gpio->chip.direction_output = nuvoton_sgpio_dir_out;
+	gpio->chip.get_direction = nuvoton_sgpio_get_direction;
+	gpio->chip.request = NULL;
+	gpio->chip.free = NULL;
+	gpio->chip.get = nuvoton_sgpio_get;
+	gpio->chip.set = nuvoton_sgpio_set;
+	gpio->chip.set_config = NULL;
+	gpio->chip.label = dev_name(&pdev->dev);
+	gpio->chip.base = -1;
+	
+	//nuvoton_sgpio_setup_irqs(gpio, pdev);
+
+	rc = devm_gpiochip_add_data(&pdev->dev, &gpio->chip, gpio);
+	if (rc < 0)
+		return rc;
+	
+	//iowrite8(0x11, gpio->base + 0x2B);
+	iowrite8(0x84, gpio->base + 0x28);
+	return 0;
+	
+}
+
+static struct platform_driver nuvoton_sgpio_driver = {
+	.driver = {
+		.name = KBUILD_MODNAME,
+		.of_match_table = nuvoton_sgpio_of_table,
+	},
+};
+
+module_platform_driver_probe(nuvoton_sgpio_driver, nuvoton_sgpio_probe);
+MODULE_DESCRIPTION("nuvoton Serial GPIO Driver");
+MODULE_LICENSE("GPL");
-- 
2.25.1

