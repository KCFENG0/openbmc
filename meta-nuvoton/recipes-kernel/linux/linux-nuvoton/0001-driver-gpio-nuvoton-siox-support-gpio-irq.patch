From ac73cd7f42d428757e3ea00d33b7536f2d7d88f5 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Mon, 6 Sep 2021 14:13:13 +0800
Subject: [PATCH] driver: gpio: nuvoton: siox: support gpio irq

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 .../dts/nuvoton/nuvoton-common-npcm8xx.dtsi   |   2 +
 drivers/gpio/gpio-npcm-sgpio.c                | 278 +++++++++++++++++-
 2 files changed, 270 insertions(+), 10 deletions(-)

diff --git a/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi b/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
index 686629a20cee..86c2153f01e2 100644
--- a/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
+++ b/arch/arm64/boot/dts/nuvoton/nuvoton-common-npcm8xx.dtsi
@@ -580,6 +580,7 @@ tmps: tmps@188000 {
 			sgpio1: sgpio@101000 {
 				clocks = <&clk NPCM8XX_CLK_APB3>;
 				compatible = "nuvoton,npcm845-sgpio";
+				interrupts = <GIC_SPI 19 IRQ_TYPE_LEVEL_HIGH>;
 				gpio-controller;
 				pinctrl-names = "default";
 				pinctrl-0 = <&iox1_pins>;
@@ -590,6 +591,7 @@ sgpio1: sgpio@101000 {
 			sgpio2: sgpio@102000 {
 				clocks = <&clk NPCM8XX_CLK_APB3>;
 				compatible = "nuvoton,npcm845-sgpio";
+				interrupts = <GIC_SPI 20 IRQ_TYPE_LEVEL_HIGH>;
 				gpio-controller;
 				pinctrl-names = "default";
 				pinctrl-0 = <&iox2_pins>;
diff --git a/drivers/gpio/gpio-npcm-sgpio.c b/drivers/gpio/gpio-npcm-sgpio.c
index 63ba4fef45fe..d5890b2d67f9 100644
--- a/drivers/gpio/gpio-npcm-sgpio.c
+++ b/drivers/gpio/gpio-npcm-sgpio.c
@@ -15,6 +15,11 @@
 #include <linux/platform_device.h>
 #include <linux/spinlock.h>
 #include <linux/string.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
 
 #define MAX_NR_HW_SGPIO			64
 
@@ -38,6 +43,8 @@
 
 #define  IOXCFG2 0x2B
 
+#define  IXOEVCFG_MASK 0x3
+
 struct nuvoton_sgpio {
 	struct gpio_chip chip;
 	struct clk *pclk;
@@ -47,6 +54,9 @@ struct nuvoton_sgpio {
 	u8 nout_sgpio;
 	u8 in_port;
 	u8 out_port;
+	int irq;
+	struct irq_domain	*domain;
+	u8 int_type[64];
 };
 
 struct nuvoton_sgpio_bank {
@@ -115,6 +125,9 @@ static const struct nuvoton_sgpio_bank nuvoton_sgpio_banks[] = {
 
 };
 
+#define GPIO_BANK(x)    (x / 8)
+#define GPIO_BIT(x)     (x % 8)
+
 static void __iomem *bank_reg(struct nuvoton_sgpio *gpio,
 			      const struct nuvoton_sgpio_bank *bank,
 				const enum nuvoton_sgpio_reg reg)
@@ -134,6 +147,27 @@ static void __iomem *bank_reg(struct nuvoton_sgpio *gpio,
 	}
 }
 
+static void irqd_to_nuvoton_sgpio_data(struct irq_data *d,
+					struct nuvoton_sgpio **gpio,
+					const struct nuvoton_sgpio_bank **bank,
+					u8 *bit, int *offset)
+{
+	struct nuvoton_sgpio *internal;
+
+	*offset = irqd_to_hwirq(d);
+	internal = irq_data_get_irq_chip_data(d);
+	WARN_ON(!internal);
+
+	printk("jimtest[%d][%s] offset %d\n",__LINE__,__func__, *offset);
+
+	*gpio = internal;
+	*offset -= internal->nout_sgpio;
+	*bank = &nuvoton_sgpio_banks[GPIO_BANK(*offset)];
+	*bit = GPIO_BIT(*offset);
+	printk("jimtest[%d][%s] bank %d\n",__LINE__,__func__, GPIO_BANK(*offset));
+	printk("jimtest[%d][%s] bit %d\n",__LINE__,__func__, *bit);
+}
+
 static int nuvoton_sgpio_init_valid_mask(struct gpio_chip *gc,
 					 unsigned long *valid_mask, unsigned int ngpios)
 {
@@ -141,10 +175,13 @@ static int nuvoton_sgpio_init_valid_mask(struct gpio_chip *gc,
 	u8 in_port, out_port;
 	u8 set_port;
 
+	printk("jimtest[%d][%s] ngpios %d \n",__LINE__,__func__, ngpios);
+
 	if (gpio->nin_sgpio % 8 > 0)
 		in_port = gpio->nin_sgpio / 8 + 1;
 	else
 		in_port = gpio->nin_sgpio / 8;
+
 	if (gpio->nout_sgpio % 8 > 0)
 		out_port = gpio->nout_sgpio / 8 + 1;
 	else
@@ -162,6 +199,8 @@ static int nuvoton_sgpio_dir_in(struct gpio_chip *gc, unsigned int offset)
 {
 	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
 
+	printk("jimtest[%d][%s] offset %d \n",__LINE__,__func__, offset);
+
 	if (offset < gpio->nout_sgpio)
 		return -EINVAL;
 
@@ -172,6 +211,8 @@ static int nuvoton_sgpio_dir_out(struct gpio_chip *gc, unsigned int offset, int
 {
 	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
 
+	printk("jimtest[%d][%s] offset %d val %d\n",__LINE__,__func__, offset, val);
+
 	if (offset < gpio->nout_sgpio) {
 		gc->set(gc, offset, val);
 		return 0;
@@ -183,6 +224,8 @@ static int nuvoton_sgpio_get_direction(struct gpio_chip *gc, unsigned int offset
 {
 	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
 
+	printk("jimtest[%d][%s] offset %d \n",__LINE__,__func__, offset);
+
 	if (offset < gpio->nout_sgpio)
 		return 0;
 	else
@@ -192,18 +235,20 @@ static int nuvoton_sgpio_get_direction(struct gpio_chip *gc, unsigned int offset
 static void nuvoton_sgpio_set(struct gpio_chip *gc, unsigned int offset, int val)
 {
 	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
-	const struct  nuvoton_sgpio_bank *bank = &nuvoton_sgpio_banks[offset / 8];
+	const struct  nuvoton_sgpio_bank *bank = &nuvoton_sgpio_banks[GPIO_BANK(offset)];
 	void __iomem *addr;
 	u8 reg = 0;
 
+	printk("jimtest[%d][%s] offset %d val %d\n",__LINE__,__func__, offset, val);
+
 	addr = bank_reg(gpio, bank, wdata_reg);
 	reg = ioread8(addr);
 
 	if (val) {
-		reg |= (val << (offset % 8));
+		reg |= (val << GPIO_BIT(offset));
 		iowrite8(reg, addr);
 	} else {
-		reg &= ~(1 << (offset % 8));
+		reg &= ~(1 << GPIO_BIT(offset));
 		iowrite8(reg, addr);
 	}
 }
@@ -211,24 +256,26 @@ static void nuvoton_sgpio_set(struct gpio_chip *gc, unsigned int offset, int val
 static int nuvoton_sgpio_get(struct gpio_chip *gc, unsigned int offset)
 {
 	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
+	const struct  nuvoton_sgpio_bank *bank;
 	void __iomem *addr;
-	u8 dir, temp;
-	u8 reg = 0;
+	u8 dir, reg;
+
+	printk("jimtest[%d][%s] offset %d\n",__LINE__,__func__, offset);
 
 	dir = nuvoton_sgpio_get_direction(gc, offset);
 	if (dir == 0) {
-		const struct  nuvoton_sgpio_bank *bank = &nuvoton_sgpio_banks[offset / 8];
+		bank = &nuvoton_sgpio_banks[GPIO_BANK(offset)];
 
 		addr = bank_reg(gpio, bank, wdata_reg);
 		reg = ioread8(addr);
-		reg = (reg >> (offset % 8)) & 0x01;
+		reg = (reg >> GPIO_BIT(offset)) & 0x01;
 	} else {
-		temp = offset - gpio->nout_sgpio;
-		const struct  nuvoton_sgpio_bank *bank = &nuvoton_sgpio_banks[temp / 8];
+		offset -= gpio->nout_sgpio;
+		bank = &nuvoton_sgpio_banks[GPIO_BANK(offset)];
 
 		addr = bank_reg(gpio, bank, rdata_reg);
 		reg = ioread8(addr);
-		reg = (reg >> (temp % 8)) & 0x01;
+		reg = (reg >> GPIO_BIT(offset)) & 0x01;
 	}
 
 	return reg;
@@ -237,6 +284,7 @@ static int nuvoton_sgpio_get(struct gpio_chip *gc, unsigned int offset)
 static void nuvoton_sgpio_setup_enable(struct nuvoton_sgpio *gpio, u8 enable)
 {
 	u8 reg = 0;
+	printk("jimtest[%d][%s] enable %d\n",__LINE__,__func__, enable);
 
 	reg = ioread8(gpio->base + IOXCTS);
 	reg = reg & ~IOXCTS_RD_MODE;
@@ -284,6 +332,210 @@ static int nuvoton_sgpio_setup_clk(struct nuvoton_sgpio *gpio, u32 sgpio_freq)
 	return 0;
 }
 
+static void nuvoton_sgpio_irq_init_valid_mask(struct gpio_chip *gc,
+		unsigned long *valid_mask, unsigned int ngpios)
+{
+	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
+	int n = gpio->nin_sgpio;
+
+	/* input GPIOs in the high range */
+	bitmap_set(valid_mask, gpio->nout_sgpio, n);
+	bitmap_clear(valid_mask, 0, gpio->nout_sgpio);
+
+	printk("jimtest[%d][%s][%d][%d]\n",__LINE__,__func__,n,ngpios);
+}
+
+static void nuvoton_sgpio_irq_set_mask(struct irq_data *d, bool set)
+{
+	const struct nuvoton_sgpio_bank *bank;
+	struct nuvoton_sgpio *gpio;
+	unsigned long flags;
+	u16 reg;
+	u8 bit, type;
+	void __iomem *addr;
+	int offset;
+
+	irqd_to_nuvoton_sgpio_data(d, &gpio, &bank, &bit, &offset);
+	addr = bank_reg(gpio, bank, event_config);
+	printk("jimtest[%d][%s] addr 0x%x\n",__LINE__,__func__, addr);
+	spin_lock_irqsave(&gpio->lock, flags);
+
+	nuvoton_sgpio_setup_enable(gpio, 0);
+
+	reg = ioread16(addr);
+	if (set) {
+		reg &= ~(IXOEVCFG_MASK << (bit * 2));
+	} else {
+		type = gpio->int_type[offset - gpio->nout_sgpio];
+		reg |= (type << (bit * 2));
+	}
+
+	printk("jimtest[%d][%s] reg 0x%x\n",__LINE__,__func__, reg);
+
+	iowrite16(reg, addr);
+
+	nuvoton_sgpio_setup_enable(gpio, 1);
+
+	addr = bank_reg(gpio, bank, event_status);
+	reg = ioread8(addr);
+	reg |= BIT(bit);
+	iowrite8(reg, addr);
+
+	spin_unlock_irqrestore(&gpio->lock, flags);
+}
+
+static void nuvoton_sgpio_irq_ack(struct irq_data *d)
+{
+	const struct nuvoton_sgpio_bank *bank;
+	struct nuvoton_sgpio *gpio;
+	unsigned long flags;
+	void __iomem *status_addr;
+	int offset;
+	u8 bit;
+
+	printk("jimtest[%d][%s]\n",__LINE__,__func__);
+
+	irqd_to_nuvoton_sgpio_data(d, &gpio, &bank, &bit, &offset);
+
+	status_addr = bank_reg(gpio, bank, event_status);
+
+	spin_lock_irqsave(&gpio->lock, flags);
+
+	iowrite8(BIT(bit), status_addr);
+
+	spin_unlock_irqrestore(&gpio->lock, flags);
+}
+
+static void nuvoton_sgpio_irq_mask(struct irq_data *d)
+{
+	printk("jimtest[%d][%s]\n",__LINE__,__func__);
+	nuvoton_sgpio_irq_set_mask(d, true);
+}
+static void nuvoton_sgpio_irq_unmask(struct irq_data *d)
+{
+	printk("jimtest[%d][%s]\n",__LINE__,__func__);
+	nuvoton_sgpio_irq_set_mask(d, false);
+}
+static int nuvoton_sgpio_set_type(struct irq_data *d, unsigned int type)
+{
+	u32 val;
+	u8 bit;
+	u16 reg;
+	const struct nuvoton_sgpio_bank *bank;
+	irq_flow_handler_t handler;
+	struct nuvoton_sgpio *gpio;
+	unsigned long flags;
+	void __iomem *addr;
+	int offset;
+
+	printk("jimtest[%d][%s] type = 0x%x\n",__LINE__,__func__, type);
+
+	irqd_to_nuvoton_sgpio_data(d, &gpio, &bank, &bit, &offset);
+
+	switch (type & IRQ_TYPE_SENSE_MASK) {
+	case IRQ_TYPE_EDGE_BOTH:
+		val = 3;
+		handler = handle_edge_irq;
+		break;
+	case IRQ_TYPE_EDGE_RISING:
+		val = 1;
+		handler = handle_edge_irq;
+		break;
+	case IRQ_TYPE_EDGE_FALLING:
+		val = 2;
+		handler = handle_edge_irq;
+		break;
+	case IRQ_TYPE_LEVEL_HIGH:
+		val = 1;
+		handler = handle_level_irq;
+		break;
+	case IRQ_TYPE_LEVEL_LOW:
+		val = 2;
+		handler = handle_level_irq;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	gpio->int_type[offset - gpio->nout_sgpio] = val;
+
+	spin_lock_irqsave(&gpio->lock, flags);
+	nuvoton_sgpio_setup_enable(gpio, 0);
+	addr = bank_reg(gpio, bank, event_config);
+	reg = ioread16(addr);
+
+	reg |= (val << (bit * 2));
+
+	iowrite16(reg, addr);
+	nuvoton_sgpio_setup_enable(gpio, 1);
+	spin_unlock_irqrestore(&gpio->lock, flags);
+
+	irq_set_handler_locked(d, handler);
+
+	return 0;
+}
+
+static void nuvoton_sgpio_irq_handler(struct irq_desc *desc)
+{
+	struct gpio_chip *gc = irq_desc_get_handler_data(desc);
+	struct irq_chip *ic = irq_desc_get_chip(desc);
+	struct nuvoton_sgpio *gpio = gpiochip_get_data(gc);
+	unsigned int i,j, p, girq;
+	unsigned long reg;
+
+	printk("jimtest[%d][%s]\n",__LINE__,__func__);
+
+	chained_irq_enter(ic, desc);
+
+	for (i = 0; i < ARRAY_SIZE(nuvoton_sgpio_banks); i++) {
+		const struct nuvoton_sgpio_bank *bank = &nuvoton_sgpio_banks[i];
+		reg = ioread8(bank_reg(gpio, bank, event_status));
+		for_each_set_bit(j, &reg, 8) {
+			girq = irq_find_mapping(gc->irq.domain, i * 8 + gpio->nout_sgpio + j);
+			generic_handle_irq(girq);
+			printk("jimtest[%d][%s][%d][%x]\n",__LINE__,__func__,j,reg);
+		}
+	}
+
+	chained_irq_exit(ic, desc);
+}
+
+static struct irq_chip nuvoton_sgpio_irqchip = {
+	.name       = "nuvoton-sgpio",
+	.irq_ack    = nuvoton_sgpio_irq_ack,
+	.irq_mask   = nuvoton_sgpio_irq_mask,
+	.irq_unmask = nuvoton_sgpio_irq_unmask,
+	.irq_set_type   = nuvoton_sgpio_set_type,
+};
+
+static int nuvoton_sgpio_setup_irqs(struct nuvoton_sgpio *gpio,
+				   struct platform_device *pdev)
+{
+	int rc, i, ret;
+	const struct nuvoton_sgpio_bank *bank;
+
+	struct gpio_irq_chip *irq;
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+
+	rc = platform_get_irq(pdev, 0);
+	if (rc < 0)
+		return rc;
+
+	gpio->irq = rc;
+
+	irq = &gpio->chip.irq;
+	irq->chip = &nuvoton_sgpio_irqchip;
+	irq->init_valid_mask = nuvoton_sgpio_irq_init_valid_mask;
+	irq->handler = handle_bad_irq;
+	irq->default_type = IRQ_TYPE_NONE;
+	irq->parent_handler = nuvoton_sgpio_irq_handler;
+	irq->parent_handler_data = gpio;
+	irq->parents = &gpio->irq;
+	irq->num_parents = 1;
+
+	return 0;
+}
 static const struct of_device_id nuvoton_sgpio_of_table[] = {
 	{ .compatible = "nuvoton,npcm7xx-sgpio" },
 	{ .compatible = "nuvoton,npcm845-sgpio" },
@@ -307,6 +559,8 @@ static int __init nuvoton_sgpio_probe(struct platform_device *pdev)
 	if (IS_ERR(gpio->base))
 		return PTR_ERR(gpio->base);
 
+	printk("jimtest[%d][%s] gpio->base = 0x%x\n",__LINE__,__func__, gpio->base);
+
 	rc = of_property_read_u32(pdev->dev.of_node, "nin_gpios", &nin_gpios);
 	if (rc < 0) {
 		dev_err(&pdev->dev, "Could not read ngpios property\n");
@@ -357,6 +611,10 @@ static int __init nuvoton_sgpio_probe(struct platform_device *pdev)
 	gpio->chip.label = dev_name(&pdev->dev);
 	gpio->chip.base = -1;
 
+	rc = nuvoton_sgpio_setup_irqs(gpio, pdev);
+	if (rc < 0)
+		return rc;
+
 	rc = devm_gpiochip_add_data(&pdev->dev, &gpio->chip, gpio);
 	if (rc < 0)
 		return rc;
-- 
2.25.1

