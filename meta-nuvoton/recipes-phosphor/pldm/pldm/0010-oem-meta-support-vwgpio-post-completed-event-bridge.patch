From 067dddd0e0644fa00dae284db56b2bb2509bf9d4 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Tue, 8 Oct 2024 18:32:19 +0800
Subject: [PATCH] oem-meta: support vwgpio event bridge

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 libpldmresponder/meson.build                  |  1 +
 .../libpldmresponder/oem_meta_file_io.cpp     |  4 +
 .../oem_meta_file_io_by_type.hpp              |  1 +
 .../oem_meta_file_io_type_vw_gpio.cpp         | 85 +++++++++++++++++++
 .../oem_meta_file_io_type_vw_gpio.hpp         | 52 ++++++++++++
 5 files changed, 143 insertions(+)
 create mode 100644 oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.cpp
 create mode 100644 oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.hpp

diff --git a/libpldmresponder/meson.build b/libpldmresponder/meson.build
index 040cd8882..7f44a5abc 100644
--- a/libpldmresponder/meson.build
+++ b/libpldmresponder/meson.build
@@ -67,6 +67,7 @@ if get_option('oem-meta').allowed()
     sources += [
         '../oem/meta/libpldmresponder/oem_meta_file_io.cpp',
         '../oem/meta/libpldmresponder/oem_meta_file_io_type_post_code.cpp',
+        '../oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.cpp',
     ]
 endif
 
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io.cpp b/oem/meta/libpldmresponder/oem_meta_file_io.cpp
index aedffbc9e..e090fcd28 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io.cpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io.cpp
@@ -1,6 +1,7 @@
 #include "oem_meta_file_io.hpp"
 
 #include "oem_meta_file_io_type_post_code.hpp"
+#include "oem_meta_file_io_type_vw_gpio.hpp"
 #include "xyz/openbmc_project/Common/error.hpp"
 
 #include <libpldm/oem/meta/ipmi_bridge.h>
@@ -23,6 +24,9 @@ std::unique_ptr<FileHandler>
         case POST_CODE:
             return std::make_unique<PostCodeHandler>(
                 messageTid, configurationDescovery->getConfigurations());
+        case VW_GPIO:
+            return std::make_unique<vwGpioHandler>(
+                messageTid, configurationDescovery->getConfigurations());
         default:
             error("Get invalid file io type, FILEIOTYPE={FILEIOTYPE}",
                   "FILEIOTYPE", fileIOType);
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp b/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
index 6e8bd44c6..3a7e3472b 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
@@ -18,6 +18,7 @@ constexpr auto ipmiDataMaxLength = 1024;
 enum pldm_oem_meta_file_io_type : uint8_t
 {
     POST_CODE = 0x00,
+    VW_GPIO = 0x06,
 };
 
 class FileHandler
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.cpp b/oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.cpp
new file mode 100644
index 000000000..07bdf64f5
--- /dev/null
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.cpp
@@ -0,0 +1,85 @@
+#include "oem_meta_file_io_type_vw_gpio.hpp"
+
+#include <phosphor-logging/lg2.hpp>
+
+#include <utility>
+
+#define BIT(i)			(1 << i)
+#define DIRECTION_MS		BIT(7)
+#define VW_DATA_INDEX		0
+#define VW_VALID_INDEX		4
+#define VW_GPIO_NUM		4
+
+#define VW_GPIO_MSG_SIZE	2
+#define VW_SM_GPIO_SUM          64
+#define POST_COMPLETE_EVENT	127
+
+PHOSPHOR_LOG2_USING;
+namespace pldm::responder::oem_meta
+{
+
+using postcompleted_t = bool;
+
+int vwGpioHandler::write(const message& vwGpioList)
+{
+    uint8_t data[VW_GPIO_MSG_SIZE] = {0};
+    uint8_t index = 0;
+    uint8_t vw_pin;
+    pldm::utils::DBusMapping dbusMapping;
+    bool postComplete = data[0];
+
+    if (vwGpioList.size() != VW_GPIO_MSG_SIZE) {
+        error("VW gpio message size is not accepted");
+        return PLDM_ERROR;
+    }
+
+    data[0] = vwGpioList[0];
+    data[1] = vwGpioList[1];
+
+    if (!(data[1] & DIRECTION_MS)) {
+        error("VW gpio StoM direction is not accepted");
+        return PLDM_ERROR;
+    }
+
+    for (vw_pin = 0; vw_pin < VW_GPIO_NUM; vw_pin++) {
+        if (data[0] & BIT((VW_VALID_INDEX + vw_pin))) {
+            index = vw_pin;
+            vw_pin += (data[1] & ~DIRECTION_MS) * VW_GPIO_NUM + VW_SM_GPIO_SUM;
+            switch (vw_pin) {
+                case POST_COMPLETE_EVENT:
+                    postComplete = (data[0] & BIT(index)) ? false : true;;
+                    break;
+                default:
+                    error("VW gpio pin is not accepted");
+                    return PLDM_ERROR;
+            }
+        }
+    }
+
+
+    static constexpr auto dbusService = "xyz.openbmc_project.Host.Misc.Manager";
+    static constexpr auto dbusObj = "/xyz/openbmc_project/misc/platform_state";
+
+    try
+    {
+        auto& bus = pldm::utils::DBusHandler::getBus();
+        auto method =
+            bus.new_method_call(dbusService, dbusObj,
+                                "org.freedesktop.DBus.Properties", "Set");
+
+        method.append(
+            "xyz.openbmc_project.State.Host.Misc", "PostComplete",
+          std::variant<postcompleted_t>(postcompleted_t(postComplete)));
+
+        bus.call(method);
+    }
+    catch (const std::exception& e)
+    {
+        error("Set Post completed error. ERROR={ERROR}", "ERROR", e);
+        return PLDM_ERROR;
+    }
+
+    return PLDM_SUCCESS;
+}
+
+} // namespace pldm::responder::oem_meta
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.hpp b/oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.hpp
new file mode 100644
index 000000000..9a36d585d
--- /dev/null
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_type_vw_gpio.hpp
@@ -0,0 +1,52 @@
+#pragma once
+
+#include "common/utils.hpp"
+#include "oem_meta_file_io_by_type.hpp"
+#include "requester/configuration_discovery_handler.hpp"
+
+namespace pldm::responder::oem_meta
+{
+/** @class vwGpioHandler
+ *
+ *  @brief Inherits and implements FileHandler. This class is used
+ *  to store incoming postcode
+ */
+class vwGpioHandler : public FileHandler
+{
+  public:
+    vwGpioHandler(pldm_tid_t tid,
+                    const std::map<std::string, MctpEndpoint>& configurations) :
+        tid(tid), configurations(configurations)
+    {}
+
+    ~vwGpioHandler() = default;
+
+    /** @brief Method to store postcode list
+     *  @param[in] data - post code
+     *  @return  PLDM status code
+     */
+    int write(const message& data);
+
+    /** @brief Method to read postcode list
+     *  @param[in] data - post code
+     *  @return  PLDM status code
+     */
+    int read(const message&)
+    {
+        return PLDM_ERROR_UNSUPPORTED_PLDM_CMD;
+    }
+
+  private:
+    /** @brief Parse object path to get correspond slot number
+     *  @param[in] slot - slot number
+     */
+    void parseObjectPathToGetSlot(uint64_t& slot);
+
+    /** @brief The terminus ID of the message source*/
+    pldm_tid_t tid = 0;
+
+    /** @brief Get existing configurations with MctpEndpoint*/
+    const std::map<configDbusPath, MctpEndpoint>& configurations;
+};
+
+} // namespace pldm::responder::oem_meta
-- 
2.34.1

