From b09f8f350534026cf1e6e1da869b811ad98cc8d8 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Fri, 13 Sep 2024 15:42:45 +0800
Subject: [PATCH] oem: meta: support ipmi bridge oem command

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 .../libpldmresponder/oem_meta_file_io.cpp     | 51 +++++++++++++++++++
 .../libpldmresponder/oem_meta_file_io.hpp     | 21 ++++++++
 .../oem_meta_file_io_by_type.hpp              |  1 +
 3 files changed, 73 insertions(+)

diff --git a/oem/meta/libpldmresponder/oem_meta_file_io.cpp b/oem/meta/libpldmresponder/oem_meta_file_io.cpp
index 59c0b3f30..aedffbc9e 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io.cpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io.cpp
@@ -3,6 +3,7 @@
 #include "oem_meta_file_io_type_post_code.hpp"
 #include "xyz/openbmc_project/Common/error.hpp"
 
+#include <libpldm/oem/meta/ipmi_bridge.h>
 #include <libpldm/oem/meta/file_io.h>
 
 #include <filesystem>
@@ -60,4 +61,54 @@ Response FileIOHandler::writeFileIO(pldm_tid_t tid, const pldm_msg* request,
     return ccOnlyResponse(request, rc);
 }
 
+Response FileIOHandler::IPMIReguest(pldm_tid_t, const pldm_msg* request,
+                                    size_t payloadLength)
+{
+    uint8_t iana[3];
+    uint8_t netfn_lun;
+    uint8_t cmd;
+
+    std::array<uint8_t, 1024> retDataField{};
+
+    auto rc = decode_oem_meta_ipmi_bridge_req(request, payloadLength, iana,
+                                          &netfn_lun, &cmd, retDataField.data());
+
+    if (rc != PLDM_SUCCESS)
+    {
+        return ccOnlyResponse(request, rc);
+    }
+
+    uint8_t netfn = netfn_lun >> 2;
+    uint8_t lun = netfn_lun & 3;
+
+    auto& bus = pldm::utils::DBusHandler::getBus();
+    auto method = bus.new_method_call("xyz.openbmc_project.Ipmi.Host",
+                                 "/xyz/openbmc_project/Ipmi",
+                                 "xyz.openbmc_project.Ipmi.Server", "execute");
+
+    std::map<std::string, std::variant<int>> options;
+
+    auto data = std::span(std::begin(retDataField), payloadLength - 5);
+
+    method.append(netfn, lun, cmd, data, options);
+    auto reply = bus.call(method, dbusTimeout);
+
+    std::tuple<uint8_t, uint8_t, uint8_t, uint8_t, std::vector<uint8_t>>
+            ret;
+    reply.read(ret);
+    const auto& [netfn_r, lun_r, cmd_r, cc_r, data_r] = ret;
+
+    Response response(
+        sizeof(pldm_msg_hdr) + static_cast<int>(data_r.size()) + 4, 0);
+    auto responsePtr = reinterpret_cast<pldm_msg*>(response.data());
+
+    rc = encode_oem_meta_ipmi_bridge_req(request->hdr.instance_id, PLDM_SUCCESS, netfn_r, lun_r, cmd_r, cc_r, static_cast<int>(data_r.size()), reinterpret_cast<uint8_t*>(const_cast<uint8_t*>(data_r.data())), responsePtr);
+    if (rc != PLDM_SUCCESS)
+    {
+        return ccOnlyResponse(request, rc);
+    }
+
+    return response;
+}
+
 } // namespace pldm::responder::oem_meta
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io.hpp b/oem/meta/libpldmresponder/oem_meta_file_io.hpp
index 841fb984d..ea1ebd2c4 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io.hpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io.hpp
@@ -6,6 +6,7 @@
 #include "requester/configuration_discovery_handler.hpp"
 
 #include <libpldm/oem/meta/file_io.h>
+#include <libpldm/oem/meta/ipmi_bridge.h>
 
 #include <phosphor-logging/lg2.hpp>
 
@@ -26,6 +27,13 @@ class FileIOHandler : public CmdHandler
                    size_t payloadLength) {
                 return this->writeFileIO(tid, request, payloadLength);
             });
+
+         handlers.emplace(
+            PLDM_OEM_META_CMD_IPMI_BRIDGE,
+            [this](pldm_tid_t tid, const pldm_msg* request,
+                   size_t payloadLength) {
+                return this->IPMIReguest(tid, request, payloadLength);
+            });
     }
 
   private:
@@ -40,6 +48,19 @@ class FileIOHandler : public CmdHandler
     Response writeFileIO(pldm_tid_t tid, const pldm_msg* request,
                          size_t payloadLength);
 
+  private:
+    /** @brief Handler for IPMIReguest command
+     *
+     *  @param[in] tid - the device tid
+     *  @param[in] request - pointer to PLDM request payload
+     *  @param[in] payloadLength - length of the message
+     *
+     *  @return PLDM response message
+     */
+    Response IPMIReguest(pldm_tid_t tid, const pldm_msg* request,
+                         size_t payloadLength);
+
+
     std::unique_ptr<FileHandler>
         getHandlerByType(pldm_tid_t tid, uint8_t fileIOType);
 
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp b/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
index 739b9cd33..6e8bd44c6 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
@@ -13,6 +13,7 @@ namespace pldm::responder::oem_meta
 using message = std::span<uint8_t>;
 using configDbusPath = std::string;
 constexpr auto decodeDataMaxLength = 32;
+constexpr auto ipmiDataMaxLength = 1024;
 
 enum pldm_oem_meta_file_io_type : uint8_t
 {
-- 
2.34.1

