From 32cdaa0f8124c8414db4c7f12cf5c186588298d7 Mon Sep 17 00:00:00 2001
From: Tim Lee <timlee660101@gmail.com>
Date: Mon, 14 Nov 2022 14:39:46 +0800
Subject: [PATCH] change size_t to uint32_t type in encrypt_decrypt_data
 function

Signed-off-by: Tim Lee <timlee660101@gmail.com>
---
 src/pam_ipmisave/pam_ipmisave.c | 40 ++++++++++++++++-----------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/src/pam_ipmisave/pam_ipmisave.c b/src/pam_ipmisave/pam_ipmisave.c
index c105ba6..bc5fa4f 100644
--- a/src/pam_ipmisave/pam_ipmisave.c
+++ b/src/pam_ipmisave/pam_ipmisave.c
@@ -52,11 +52,11 @@
 typedef struct metapassstruct {
 	char signature[10];
 	unsigned char reseved[2];
-	size_t hashsize;
-	size_t ivsize;
-	size_t datasize;
-	size_t padsize;
-	size_t macsize;
+	uint32_t hashsize;
+	uint32_t ivsize;
+	uint32_t datasize;
+	uint32_t padsize;
+	uint32_t macsize;
 } metapassstruct;
 
 /**
@@ -104,7 +104,7 @@ static const char *get_option(const pam_handle_t *pamh, const char *option,
 			      int argc, const char **argv)
 {
 	int i;
-	size_t len;
+	uint32_t len;
 
 	len = strlen(option);
 
@@ -140,15 +140,15 @@ static const char *get_option(const pam_handle_t *pamh, const char *option,
  */
 int encrypt_decrypt_data(const pam_handle_t *pamh, int isencrypt,
 			 const EVP_CIPHER *cipher, const char *key,
-			 size_t keylen, const char *iv, size_t ivlen,
-			 const char *inbytes, size_t inbyteslen, char *outbytes,
-			 size_t *outbyteslen, char *mac, size_t *maclen)
+			 uint32_t keylen, const char *iv, uint32_t ivlen,
+			 const char *inbytes, uint32_t inbyteslen, char *outbytes,
+			 uint32_t *outbyteslen, char *mac, uint32_t *maclen)
 {
 	EVP_CIPHER_CTX *ctx;
 	const EVP_MD *digest;
-	size_t outEVPlen = 0;
+	uint32_t outEVPlen = 0;
 	int retval = 0;
-	size_t outlen = 0;
+	uint32_t outlen = 0;
 
 	if (cipher == NULL || key == NULL || iv == NULL || inbytes == NULL
 	    || outbytes == NULL || mac == NULL || inbyteslen == 0
@@ -161,7 +161,7 @@ int encrypt_decrypt_data(const pam_handle_t *pamh, int isencrypt,
 	digest = EVP_sha256();
 	if (!isencrypt) {
 		char calmac[EVP_MAX_MD_SIZE];
-		size_t calmaclen = 0;
+		uint32_t calmaclen = 0;
 		// calculate MAC for the encrypted message.
 		if (NULL
 		    == HMAC(digest, key, keylen, inbytes, inbyteslen, calmac,
@@ -274,21 +274,21 @@ int update_pass_special_file(const pam_handle_t *pamh, const char *keyfilename,
 	FILE *pwfile = NULL, *opwfile = NULL, *keyfile = NULL;
 	int err = 0, wroteentry = 0;
 	char tempfilename[1024];
-	size_t forwholen = strlen(forwho);
-	size_t towhatlen = strlen(towhat);
+	uint32_t forwholen = strlen(forwho);
+	uint32_t towhatlen = strlen(towhat);
 	char keybuff[MAX_KEY_SIZE] = {0};
-	size_t keybuffsize = sizeof(keybuff);
+	uint32_t keybuffsize = sizeof(keybuff);
 
 	const EVP_CIPHER *cipher = EVP_aes_128_cbc();
 	const EVP_MD *digest = EVP_sha256();
 
 	char *linebuff = NULL, *opwfilebuff = NULL, *opwptext = NULL;
-	size_t opwptextlen = 0, opwfilesize = 0;
+	uint32_t opwptextlen = 0, opwfilesize = 0;
 	metapassstruct *opwmp = NULL;
 
 	char *pwptext = NULL, *pwctext = NULL;
-	size_t pwctextlen = 0, pwptextlen = 0, maclen = 0;
-	size_t writtensize = 0, keylen = 0;
+	uint32_t pwctextlen = 0, pwptextlen = 0, maclen = 0;
+	uint32_t writtensize = 0, keylen = 0;
 	metapassstruct pwmp = {META_PASSWD_SIG, {0, 0}, .0, 0, 0, 0, 0};
 	char mac[EVP_MAX_MD_SIZE] = {0};
 	unsigned char key[EVP_MAX_KEY_LENGTH];
@@ -672,8 +672,8 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags, int argc, const char **argv)
 
 	if (spec_grp_usr) {
 		// verify the new password is acceptable.
-		size_t pass_len = strlen(pass_new);
-		size_t user_len = strlen(user);
+		uint32_t pass_len = strlen(pass_new);
+		uint32_t user_len = strlen(user);
 		if (pass_len > MAX_SPEC_GRP_PASS_LENGTH
 		    || user_len > MAX_SPEC_GRP_USER_LENGTH) {
 			pam_syslog(
-- 
2.17.1

