From fa33d7d0473e4a1f89b63ecaf8719e7bdedbccac Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Tue, 21 Jun 2022 17:48:54 +0800
Subject: [PATCH] add support chassis on/off target files

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 src/power_control.cpp | 57 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 56 insertions(+), 1 deletion(-)

diff --git a/src/power_control.cpp b/src/power_control.cpp
index 2e594f8..bada386 100644
--- a/src/power_control.cpp
+++ b/src/power_control.cpp
@@ -395,6 +395,47 @@ static void powerStateTransitionToCycleOff(const Event event);
 static void powerStateGracefulTransitionToCycleOff(const Event event);
 static void powerStateCheckForWarmReset(const Event event);
 
+static constexpr auto systemdBusname = "org.freedesktop.systemd1";
+static constexpr auto systemdPath = "/org/freedesktop/systemd1";
+static constexpr auto systemdInterface = "org.freedesktop.systemd1.Manager";
+static constexpr auto chassisOnTargetName = "obmc-chassis-poweron.target";
+static constexpr auto chassisOffTargetName = "obmc-chassis-poweroff.target";
+
+void chassisPowerOn()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                std::string errMsg =
+                    "Failed to call chassisPowerOn: " + ec.message();
+                phosphor::logging::log<phosphor::logging::level::ERR>(
+                    errMsg.c_str());
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        chassisOnTargetName, "replace");
+    return;
+}
+
+void chassisPowerOff()
+{
+    conn->async_method_call(
+        [](boost::system::error_code ec) {
+            if (ec)
+            {
+                std::string errMsg =
+                    "Failed to call chassisPowerOff: " + ec.message();
+                phosphor::logging::log<phosphor::logging::level::ERR>(
+                    errMsg.c_str());
+            }
+        },
+        systemdBusname, systemdPath, systemdInterface, "StartUnit",
+        chassisOffTargetName, "replace");
+    return;
+}
+
+
 static std::function<void(const Event)> getPowerStateHandler(PowerState state)
 {
     switch (state)
@@ -574,6 +615,11 @@ static void setPowerState(const PowerState state)
 
     // Save the power state for the restore policy
     savePowerState(state);
+
+    if (state == PowerState::on)
+        power_control::chassisPowerOn();
+    else if (state == PowerState::off)
+        power_control::chassisPowerOff();
 }
 
 enum class RestartCause
@@ -1620,7 +1666,6 @@ static void currentHostStateMonitor()
                 // if HostState is trurned to OFF.
                 osIface->set_property("OperatingSystemState",
                                       std::string("Inactive"));
-
                 // Set the restart cause set for this restart
                 setRestartCause();
                 resetACBootProperty();
@@ -2810,6 +2855,11 @@ int main(int argc, char* argv[])
              (sioPowerGoodLine.get_value() == sioPwrGoodConfig.polarity)))
         {
             powerState = PowerState::on;
+            power_control::chassisPowerOn();
+        }
+        else
+        {
+            power_control::chassisPowerOff();
         }
     }
     else
@@ -2817,6 +2867,11 @@ int main(int argc, char* argv[])
         if (getProperty(powerOkConfig))
         {
             powerState = PowerState::on;
+            power_control::chassisPowerOn();
+        }
+        else
+        {
+            power_control::chassisPowerOff();
         }
     }
     // Initialize the power state storage
-- 
2.34.1

