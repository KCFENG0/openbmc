From 27ed4ed5a328ddcceafb3da155b1c6f640f27881 Mon Sep 17 00:00:00 2001
From: Joseph Liu <kwliu@nuvoton.com>
Date: Tue, 26 Jul 2022 12:09:14 +0800
Subject: [PATCH 15/18] update chassishandler from intel oem ipmi

Signed-off-by: Joseph Liu <kwliu@nuvoton.com>
---
 chassishandler.cpp | 244 ++++++++++++++++++++++++++++++++-------------
 1 file changed, 177 insertions(+), 67 deletions(-)

diff --git a/chassishandler.cpp b/chassishandler.cpp
index e089083b..25efca24 100644
--- a/chassishandler.cpp
+++ b/chassishandler.cpp
@@ -65,6 +65,7 @@ static constexpr size_t forceIdentifyPos = 1;
 
 namespace ipmi
 {
+
 constexpr Cc ccParmNotSupported = 0x80;
 
 static inline auto responseParmNotSupported()
@@ -108,15 +109,17 @@ const static constexpr char chassisSMDevAddrProp[] = "SMDeviceAddress";
 const static constexpr char chassisBridgeDevAddrProp[] = "BridgeDeviceAddress";
 static constexpr uint8_t chassisCapFlagMask = 0x0f;
 static constexpr uint8_t chassisCapAddrMask = 0xfe;
-static constexpr const char* powerButtonIntf =
-    "xyz.openbmc_project.Chassis.Buttons.Power";
+
+static constexpr const char* buttonIntf = "xyz.openbmc_project.Chassis.Buttons";
+
+const static constexpr char* idButtonPath =
+    "/xyz/openbmc_project/chassis/buttons/id";
 static constexpr const char* powerButtonPath =
-    "/xyz/openbmc_project/Chassis/Buttons/Power0";
-static constexpr const char* resetButtonIntf =
-    "xyz.openbmc_project.Chassis.Buttons.Reset";
+    "/xyz/openbmc_project/chassis/buttons/power";
 static constexpr const char* resetButtonPath =
-    "/xyz/openbmc_project/Chassis/Buttons/Reset0";
-
+    "/xyz/openbmc_project/chassis/buttons/reset";
+static constexpr const char* interruptButtonPath =
+    "/xyz/openbmc_project/chassis/buttons/nmi";
 // Phosphor Host State manager
 namespace State = sdbusplus::server::xyz::openbmc_project::state;
 namespace fs = std::filesystem;
@@ -1015,42 +1018,39 @@ std::optional<bool> getPowerStatus()
  */
 bool getACFailStatus()
 {
-    constexpr const char* powerControlObj =
-        "/xyz/openbmc_project/Chassis/Control/Power0";
-    constexpr const char* powerControlIntf =
-        "xyz.openbmc_project.Chassis.Control.Power";
-    bool acFail = false;
+    constexpr const char* acBootObj =
+        "/xyz/openbmc_project/control/host0/ac_boot";
+    constexpr const char* acBootIntf = "xyz.openbmc_project.Common.ACBoot";
+    std::string acFail;
     std::shared_ptr<sdbusplus::asio::connection> bus = getSdBus();
     try
     {
-        auto service = ipmi::getService(*bus, powerControlIntf,
-                                        powerControlObj);
+        auto service = ipmi::getService(*bus, acBootIntf, acBootObj);
 
-        ipmi::Value variant = ipmi::getDbusProperty(
-            *bus, service, powerControlObj, powerControlIntf, "PFail");
-        acFail = std::get<bool>(variant);
+        ipmi::Value variant = ipmi::getDbusProperty(*bus, service, acBootObj,
+                                                    acBootIntf, "ACBoot");
+        acFail = std::get<std::string>(variant);
     }
     catch (const std::exception& e)
     {
         lg2::error(
-            "Failed to fetch PFail property ({PATH}/{INTERFAC}): {ERROR}",
-            "PATH", powerControlObj, "INTERFACE", powerControlIntf, "ERROR", e);
+            "Failed to fetch ACBoot property ({PATH}/{INTERFAC}): {ERROR}",
+            "PATH", acBootObj, "INTERFACE", acBootIntf, "ERROR", e);
     }
-    return acFail;
+    return acFail == "True";
 }
 } // namespace power_policy
 
-static std::optional<bool> getButtonEnabled(const std::string& buttonPath,
-                                            const std::string& buttonIntf)
+static std::optional<bool> getButtonEnabled(const std::string& buttonPath)
 {
     std::shared_ptr<sdbusplus::asio::connection> busp = getSdBus();
     bool buttonDisabled = false;
     try
     {
-        auto service = ipmi::getService(*busp, buttonIntf, buttonPath);
-        ipmi::Value enabled = ipmi::getDbusProperty(*busp, service, buttonPath,
-                                                    buttonIntf, "Enabled");
-        buttonDisabled = !std::get<bool>(enabled);
+        auto service = ipmi::getService(*getSdBus(), buttonIntf, buttonPath);
+        ipmi::Value disabled = ipmi::getDbusProperty(
+            *busp, service, buttonPath, buttonIntf, "ButtonMasked");
+        buttonDisabled = std::get<bool>(disabled);
     }
     catch (const sdbusplus::exception_t& e)
     {
@@ -1061,28 +1061,67 @@ static std::optional<bool> getButtonEnabled(const std::string& buttonPath,
     return std::make_optional(buttonDisabled);
 }
 
-static bool setButtonEnabled(ipmi::Context::ptr& ctx,
-                             const std::string& buttonPath,
-                             const std::string& buttonIntf, bool enable)
+static bool setButtonEnabled(const std::string& buttonPath, const bool disabled)
 {
     std::string service;
-    boost::system::error_code ec;
-    ec = ipmi::getService(ctx, buttonIntf, buttonPath, service);
-    if (!ec)
+    try
     {
-        ec = ipmi::setDbusProperty(ctx, service, buttonPath, buttonIntf,
-                                   "Enabled", enable);
+        service = ipmi::getService(*getSdBus(), buttonIntf, buttonPath);
+        ipmi::setDbusProperty(*getSdBus(), service, buttonPath, buttonIntf,
+                              "ButtonMasked", disabled);
     }
-    if (ec)
+    catch (const std::exception& e)
     {
         lg2::error(
             "Fail to set button Enabled property ({SERVICE}:{PATH}): {ERROR}",
-            "SERVICE", service, "PATH", buttonPath, "ERROR", ec.message());
+            "SERVICE", service, "PATH", buttonPath, "ERROR", e);
+        return false;
+    }
+
+    return 0;
+}
+
+static bool getRestartCause(ipmi::Context::ptr& ctx, std::string& restartCause)
+{
+    constexpr const char* restartCausePath =
+        "/xyz/openbmc_project/control/host0/restart_cause";
+    constexpr const char* restartCauseIntf =
+        "xyz.openbmc_project.Control.Host.RestartCause";
+
+    std::string service;
+    boost::system::error_code ec =
+        ipmi::getService(ctx, restartCauseIntf, restartCausePath, service);
+
+     if (!ec)
+     {
+        ec = ipmi::getDbusProperty(ctx, service, restartCausePath,
+                                   restartCauseIntf, "RestartCause",
+                                   restartCause);
+     }
+     if (ec)
+     {
+        lg2::error(
+            "Failed to fetch RestartCause property ({PATH}/{INTERFACE}) {ERROR}",
+            "PATH", restartCausePath, "INTERFACE", restartCauseIntf, "ERROR", ec.message());
         return false;
     }
     return true;
 }
 
+static bool checkIPMIRestartCause(ipmi::Context::ptr& ctx,
+                                  bool& ipmiRestartCause)
+{
+    std::string restartCause;
+    if (!getRestartCause(ctx, restartCause))
+    {
+        return false;
+    }
+    ipmiRestartCause =
+        (restartCause ==
+         "xyz.openbmc_project.State.Host.RestartCause.IpmiCommand");
+    return true;
+}
+
 static std::optional<bool> getChassisIntrusionStatus(ipmi::Context::ptr& ctx)
 {
     constexpr const char* chassisIntrusionPath =
@@ -1160,8 +1199,7 @@ ipmi::RspType<bool,    // Power is on
     }
 
     //  Front Panel Button Capabilities and disable/enable status(Optional)
-    std::optional<bool> powerButtonReading = getButtonEnabled(powerButtonPath,
-                                                              powerButtonIntf);
+    std::optional<bool> powerButtonReading = getButtonEnabled(powerButtonPath);
     // allow disable if the interface is present
     bool powerButtonDisableAllow = static_cast<bool>(powerButtonReading);
     // default return the button is enabled (not disabled)
@@ -1172,8 +1210,7 @@ ipmi::RspType<bool,    // Power is on
         powerButtonDisabled = *powerButtonReading;
     }
 
-    std::optional<bool> resetButtonReading = getButtonEnabled(resetButtonPath,
-                                                              resetButtonIntf);
+    std::optional<bool> resetButtonReading = getButtonEnabled(resetButtonPath);
     // allow disable if the interface is present
     bool resetButtonDisableAllow = static_cast<bool>(resetButtonReading);
     // default return the button is enabled (not disabled)
@@ -1184,8 +1221,27 @@ ipmi::RspType<bool,    // Power is on
         resetButtonDisabled = *resetButtonReading;
     }
 
+    std::optional<bool> interruptButtonReading =
+        getButtonEnabled(interruptButtonPath);
+    // allow disable if the interface is present
+    bool interruptButtonDisableAllow =
+        static_cast<bool>(interruptButtonReading);
+    // default return the button is enabled (not disabled)
+    bool interruptButtonDisabled = false;
+    if (interruptButtonDisableAllow)
+    {
+        // return the real value of the button status, if present
+        interruptButtonDisabled = *interruptButtonReading;
+    }
+
     bool powerDownAcFailed = power_policy::getACFailStatus();
 
+    bool powerStatusIPMI = false;
+    if (!checkIPMIRestartCause(ctx, powerStatusIPMI))
+    {
+        return ipmi::responseUnspecifiedError();
+    }
+
     bool chassisIntrusionActive = false;
     std::optional<bool> chassisIntrusionStatus = getChassisIntrusionStatus(ctx);
     if (chassisIntrusionStatus)
@@ -1202,16 +1258,13 @@ ipmi::RspType<bool,    // Power is on
     constexpr bool powerDownOverload = false;
     constexpr bool powerDownInterlock = false;
     constexpr bool powerDownPowerFault = false;
-    constexpr bool powerStatusIPMI = false;
     constexpr bool frontPanelLockoutActive = false;
     constexpr bool driveFault = false;
     constexpr bool coolingFanFault = false;
     // chassisIdentifySupport set because this command is implemented
     constexpr bool chassisIdentifySupport = true;
     uint2_t chassisIdentifyState = types::enum_cast<uint2_t>(chassisIDState);
-    constexpr bool diagButtonDisabled = false;
     constexpr bool sleepButtonDisabled = false;
-    constexpr bool diagButtonDisableAllow = false;
     constexpr bool sleepButtonDisableAllow = false;
 
     return ipmi::responseSuccess(
@@ -1227,12 +1280,12 @@ ipmi::RspType<bool,    // Power is on
         coolingFanFault, chassisIdentifyState, chassisIdentifySupport,
         false, // reserved
 
-        powerButtonDisabled, resetButtonDisabled, diagButtonDisabled,
+        powerButtonDisabled, resetButtonDisabled, interruptButtonDisabled,
         sleepButtonDisabled, powerButtonDisableAllow, resetButtonDisableAllow,
-        diagButtonDisableAllow, sleepButtonDisableAllow);
+        interruptButtonDisableAllow, sleepButtonDisableAllow);
 }
 
-enum class IpmiRestartCause
+/*enum class IpmiRestartCause
 {
     Unknown = 0x0,
     RemoteCommand = 0x1,
@@ -1286,14 +1339,14 @@ static IpmiRestartCause
             return IpmiRestartCause::Unknown;
         }
     }
-}
+}*/
 
 /*
  * getRestartCause
  * helper function for Get Host restart cause Command
  * return - optional value for RestartCause (no value on error)
  */
-static std::optional<uint4_t> getRestartCause(ipmi::Context::ptr ctx)
+/*static std::optional<uint4_t> getRestartCause(ipmi::Context::ptr ctx)
 {
     constexpr const char* restartCausePath = "/xyz/openbmc_project/state/host0";
     constexpr const char* restartCauseIntf = "xyz.openbmc_project.State.Host";
@@ -1321,23 +1374,81 @@ static std::optional<uint4_t> getRestartCause(ipmi::Context::ptr ctx)
         "ERROR", ec.message(), "PATH", restartCausePath, "INTERFACE",
         restartCauseIntf);
     return std::nullopt;
+}*/
+
+static uint4_t getRestartCauseValue(const std::string& cause)
+{
+    uint4_t restartCauseValue = 0;
+    if (cause == "xyz.openbmc_project.State.Host.RestartCause.Unknown")
+    {
+        restartCauseValue = 0x0;
+    }
+    else if (cause == "xyz.openbmc_project.State.Host.RestartCause.IpmiCommand")
+    {
+        restartCauseValue = 0x1;
+    }
+    else if (cause == "xyz.openbmc_project.State.Host.RestartCause.ResetButton")
+    {
+        restartCauseValue = 0x2;
+    }
+    else if (cause == "xyz.openbmc_project.State.Host.RestartCause.PowerButton")
+    {
+        restartCauseValue = 0x3;
+    }
+    else if (cause ==
+             "xyz.openbmc_project.State.Host.RestartCause.WatchdogTimer")
+    {
+        restartCauseValue = 0x4;
+    }
+    else if (cause == "xyz.openbmc_project.State.Host.RestartCause.OEM")
+    {
+        restartCauseValue = 0x5;
+    }
+    else if (cause ==
+             "xyz.openbmc_project.State.Host.RestartCause.PowerPolicyAlwaysOn")
+    {
+        restartCauseValue = 0x6;
+    }
+    else if (cause == "xyz.openbmc_project.State.Host.RestartCause."
+                      "PowerPolicyPreviousState")
+    {
+        restartCauseValue = 0x7;
+    }
+    else if (cause == "xyz.openbmc_project.State.Host.RestartCause.PEFReset")
+    {
+        restartCauseValue = 0x8;
+    }
+    else if (cause ==
+             "xyz.openbmc_project.State.Host.RestartCause.PEFPowerCycle")
+    {
+        restartCauseValue = 0x9;
+    }
+    else if (cause == "xyz.openbmc_project.State.Host.RestartCause.SoftReset")
+    {
+        restartCauseValue = 0xa;
+    }
+    else if (cause == "xyz.openbmc_project.State.Host.RestartCause.RTCWakeup")
+    {
+        restartCauseValue = 0xb;
+    }
+    return restartCauseValue;
 }
 
 ipmi::RspType<uint4_t, // Restart Cause
               uint4_t, // reserved
-              uint8_t  // channel number (not supported)
+              uint8_t  // channel number
               >
     ipmiGetSystemRestartCause(ipmi::Context::ptr ctx)
 {
-    std::optional<uint4_t> cause = getRestartCause(ctx);
-    if (!cause)
+    std::string restartCauseStr;
+    if (!getRestartCause(ctx, restartCauseStr))
     {
         return ipmi::responseUnspecifiedError();
     }
-
     constexpr uint4_t reserved = 0;
     auto channel = static_cast<uint8_t>(ctx->channel);
-    return ipmi::responseSuccess(cause.value(), reserved, channel);
+    return ipmi::responseSuccess(getRestartCauseValue(restartCauseStr),
+                                 reserved, channel);
 }
 /** @brief Implementation of chassis control command
  *
@@ -2321,24 +2432,23 @@ ipmi::RspType<uint3_t, // policy support
     return ipmi::responseSuccess(power_policy::allSupport, reserved);
 }
 
-ipmi::RspType<> ipmiSetFrontPanelButtonEnables(ipmi::Context::ptr ctx,
-                                               bool disablePowerButton,
-                                               bool disableResetButton, bool,
-                                               bool, uint4_t)
+ipmi::RspType<> ipmiSetFrontPanelButtonEnables(bool disablePowerButton,
+                                               bool disableResetButton,
+                                               bool disableInterruptButton,
+                                               bool, uint4_t reserved)
 {
-    using namespace chassis::internal;
-
-    // set power button Enabled property
-    bool success = setButtonEnabled(ctx, powerButtonPath, powerButtonIntf,
-                                    !disablePowerButton);
+    if (reserved)
+    {
+        return ipmi::responseInvalidFieldRequest();
+    }
+    bool error = false;
 
-    // set reset button Enabled property
-    success &= setButtonEnabled(ctx, resetButtonPath, resetButtonIntf,
-                                !disableResetButton);
+    error |= setButtonEnabled(powerButtonPath, disablePowerButton);
+    error |= setButtonEnabled(resetButtonPath, disableResetButton);
+    error |= setButtonEnabled(interruptButtonPath, disableInterruptButton);
 
-    if (!success)
+    if (error)
     {
-        // not all buttons were successfully set
         return ipmi::responseUnspecifiedError();
     }
     return ipmi::responseSuccess();
-- 
2.34.1

