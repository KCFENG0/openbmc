From 231ea2db5d774bea375e0fe85894126631eb45e9 Mon Sep 17 00:00:00 2001
From: Brian Ma <chma0@nuvoton.com>
Date: Tue, 22 Feb 2022 14:06:45 +0800
Subject: [PATCH] HwmonTempSensor: Add BMCOnDieThermalSensor type
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Now we add new sensor type BMCOnDieThermalSensor in HWmon temperatue
sensors to support thermal sensors. User need to define thermal sensor
in thermal zone in DTS.
To identify each thermal sensor per each zone, we use "Index" to match
them. User can refer following example to add BMCOnDieThermalSensor into
HWmon temperature sensor.

Example:

Entity manager configuration =>
        {
            "Index": "0",
            "Name": "BMC_CPU_Temp0",
            "Thresholds": [
...
            ],
            "Type": "BMCOnDieThermalSensor"
        },
        {
            "Index": "1",
            "Name": "BMC_CPU_Temp1",
...
            "Type": "BMCOnDieThermalSensor"
        },

root@evb-npcm845:~# busctl tree xyz.openbmc_project.HwmonTempSensor
└─/xyz
  └─/xyz/openbmc_project
    └─/xyz/openbmc_project/sensors
      └─/xyz/openbmc_project/sensors/temperature
        ├─/xyz/openbmc_project/sensors/temperature/BMC_CPU_Temp0
        ├─/xyz/openbmc_project/sensors/temperature/BMC_CPU_Temp1
        └─ ...

Signed-off-by: Brian Ma <chma0@nuvoton.com>
Change-Id: I9a7c996a17dfdab257bb83cfea5122e7857aeab8
---
 src/HwmonTempMain.cpp | 137 +++++++++++++++++++++++++++---------------
 1 file changed, 88 insertions(+), 49 deletions(-)

diff --git a/src/HwmonTempMain.cpp b/src/HwmonTempMain.cpp
index a9d47481..c6843d4e 100644
--- a/src/HwmonTempMain.cpp
+++ b/src/HwmonTempMain.cpp
@@ -49,29 +49,30 @@ static constexpr double maxValueTemperature = 127;  // DegreesC
 static constexpr double minValueTemperature = -128; // DegreesC
 
 namespace fs = std::filesystem;
-static auto sensorTypes{
-    std::to_array<const char*>({"xyz.openbmc_project.Configuration.DPS310",
-                                "xyz.openbmc_project.Configuration.EMC1412",
-                                "xyz.openbmc_project.Configuration.EMC1413",
-                                "xyz.openbmc_project.Configuration.EMC1414",
-                                "xyz.openbmc_project.Configuration.HDC1080",
-                                "xyz.openbmc_project.Configuration.JC42",
-                                "xyz.openbmc_project.Configuration.LM75A",
-                                "xyz.openbmc_project.Configuration.LM95234",
-                                "xyz.openbmc_project.Configuration.MAX31725",
-                                "xyz.openbmc_project.Configuration.MAX31730",
-                                "xyz.openbmc_project.Configuration.MAX6581",
-                                "xyz.openbmc_project.Configuration.MAX6654",
-                                "xyz.openbmc_project.Configuration.NCT7802",
-                                "xyz.openbmc_project.Configuration.NCT6779",
-                                "xyz.openbmc_project.Configuration.SBTSI",
-                                "xyz.openbmc_project.Configuration.SI7020",
-                                "xyz.openbmc_project.Configuration.TMP112",
-                                "xyz.openbmc_project.Configuration.TMP175",
-                                "xyz.openbmc_project.Configuration.TMP421",
-                                "xyz.openbmc_project.Configuration.TMP441",
-                                "xyz.openbmc_project.Configuration.TMP75",
-                                "xyz.openbmc_project.Configuration.W83773G"})};
+static auto sensorTypes{std::to_array<const char*>(
+    {"xyz.openbmc_project.Configuration.BMCOnDieThermalSensor",
+     "xyz.openbmc_project.Configuration.DPS310",
+     "xyz.openbmc_project.Configuration.EMC1412",
+     "xyz.openbmc_project.Configuration.EMC1413",
+     "xyz.openbmc_project.Configuration.EMC1414",
+     "xyz.openbmc_project.Configuration.HDC1080",
+     "xyz.openbmc_project.Configuration.JC42",
+     "xyz.openbmc_project.Configuration.LM75A",
+     "xyz.openbmc_project.Configuration.LM95234",
+     "xyz.openbmc_project.Configuration.MAX31725",
+     "xyz.openbmc_project.Configuration.MAX31730",
+     "xyz.openbmc_project.Configuration.MAX6581",
+     "xyz.openbmc_project.Configuration.MAX6654",
+     "xyz.openbmc_project.Configuration.NCT6779",
+     "xyz.openbmc_project.Configuration.NCT7802",
+     "xyz.openbmc_project.Configuration.SBTSI",
+     "xyz.openbmc_project.Configuration.SI7020",
+     "xyz.openbmc_project.Configuration.TMP112",
+     "xyz.openbmc_project.Configuration.TMP175",
+     "xyz.openbmc_project.Configuration.TMP421",
+     "xyz.openbmc_project.Configuration.TMP441",
+     "xyz.openbmc_project.Configuration.TMP75",
+     "xyz.openbmc_project.Configuration.W83773G"})};
 
 static struct SensorParams
     getSensorParameters(const std::filesystem::path& path)
@@ -194,16 +195,33 @@ static SensorConfigMap
             const SensorBaseConfigMap& cfg = cfgmap.second;
             auto busCfg = cfg.find("Bus");
             auto addrCfg = cfg.find("Address");
-            if ((busCfg == cfg.end()) || (addrCfg == cfg.end()))
+            auto indexCfg = cfg.find("Index");
+            SensorConfigKey key;
+            if (indexCfg == cfg.end())
             {
-                continue;
-            }
+                if ((busCfg == cfg.end()) || (addrCfg == cfg.end()))
+                {
+                    continue;
+                }
 
-            if ((!std::get_if<uint64_t>(&busCfg->second)) ||
-                (!std::get_if<uint64_t>(&addrCfg->second)))
+                if ((!std::get_if<uint64_t>(&busCfg->second)) ||
+                    (!std::get_if<uint64_t>(&addrCfg->second)))
+                {
+                    std::cerr << sensor.first.str
+                              << " Bus or Address invalid\n";
+                    continue;
+                }
+                key = {.bus = std::get<uint64_t>(busCfg->second),
+                       .addr = std::get<uint64_t>(addrCfg->second)};
+            }
+            else
             {
-                std::cerr << sensor.first.str << " Bus or Address invalid\n";
-                continue;
+                if (!std::get_if<uint64_t>(&indexCfg->second))
+                {
+                    std::cerr << sensor.first.str << " Index invalid\n";
+                    continue;
+                }
+                key = {.bus = 0, .addr = std::get<uint64_t>(indexCfg->second)};
             }
 
             std::vector<std::string> hwmonNames;
@@ -225,8 +243,6 @@ static SensorConfigMap
                 }
             }
 
-            SensorConfigKey key = {std::get<uint64_t>(busCfg->second),
-                                   std::get<uint64_t>(addrCfg->second)};
             SensorConfig val = {sensor.first.str, sensor.second, cfgmap.first,
                                 cfg, hwmonNames};
 
@@ -299,29 +315,52 @@ void createSensors(
                 device = directory / "device";
                 deviceName = fs::canonical(device).stem();
             }
-            auto findHyphen = deviceName.find('-');
-            if (findHyphen == std::string::npos)
-            {
-                std::cerr << "found bad device " << deviceName << "\n";
-                continue;
-            }
-            std::string busStr = deviceName.substr(0, findHyphen);
-            std::string addrStr = deviceName.substr(findHyphen + 1);
 
             uint64_t bus = 0;
             uint64_t addr = 0;
-            std::from_chars_result res;
-            res = std::from_chars(busStr.data(), busStr.data() + busStr.size(),
-                                  bus);
-            if (res.ec != std::errc{})
+            std::string busStr, addrStr;
+            auto findHyphen = deviceName.find('-');
+            if (findHyphen == std::string::npos)
             {
-                continue;
+                static const std::string thermalZone = "thermal_zone";
+                auto findBmcThermal = deviceName.find(thermalZone);
+                if (findBmcThermal == std::string::npos)
+                {
+                    std::cerr << "found bad device " << deviceName << "\n";
+                    continue;
+                }
+                // ex: thermal_zone0
+                addrStr =
+                    deviceName.substr(findBmcThermal + thermalZone.length());
+                try
+                {
+                    addr = std::stoi(addrStr);
+                }
+                catch (const std::invalid_argument&)
+                {
+                    std::cerr << "Cannot get zone number: " << deviceName
+                              << "\n";
+                    continue;
+                }
             }
-            res = std::from_chars(addrStr.data(),
-                                  addrStr.data() + addrStr.size(), addr, 16);
-            if (res.ec != std::errc{})
+            else
             {
-                continue;
+                busStr = deviceName.substr(0, findHyphen);
+                addrStr = deviceName.substr(findHyphen + 1);
+                std::from_chars_result res;
+                res = std::from_chars(busStr.data(),
+                                      busStr.data() + busStr.size(), bus);
+
+                if (res.ec != std::errc{})
+                {
+                    continue;
+                }
+                res = std::from_chars(
+                    addrStr.data(), addrStr.data() + addrStr.size(), addr, 16);
+                if (res.ec != std::errc{})
+                {
+                    continue;
+                }
             }
 
             auto thisSensorParameters = getSensorParameters(path);
-- 
2.34.1

