From bbe2d58f10aa4841a93d8579385190503d6025cf Mon Sep 17 00:00:00 2001
From: Stanley Chu <yschu@nuvoton.com>
Date: Tue, 27 Sep 2022 15:28:06 +0800
Subject: [PATCH] add i3c ibi test

Signed-off-by: Stanley Chu <yschu@nuvoton.com>
---
 drivers/i3c/Kconfig  |  6 ++++++
 drivers/i3c/i3cdev.c | 42 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 48 insertions(+)

diff --git a/drivers/i3c/Kconfig b/drivers/i3c/Kconfig
index 01642768ab5f..59712ed1e0b0 100644
--- a/drivers/i3c/Kconfig
+++ b/drivers/i3c/Kconfig
@@ -35,5 +35,11 @@ config I3CDEV
 	  Note that this application programming interface is EXPERIMENTAL
 	  and hence SUBJECT TO CHANGE WITHOUT NOTICE while it stabilizes.
 
+config I3C_IBI_TEST
+	bool "I3C IBI Test"
+	default y
+	help
+	   This driver is used for I3C IBI test.
+
 source "drivers/i3c/master/Kconfig"
 endif # I3C
diff --git a/drivers/i3c/i3cdev.c b/drivers/i3c/i3cdev.c
index 949715a9dfdb..355860e70de4 100644
--- a/drivers/i3c/i3cdev.c
+++ b/drivers/i3c/i3cdev.c
@@ -17,6 +17,7 @@
 #include <linux/notifier.h>
 #include <linux/slab.h>
 #include <linux/uaccess.h>
+#include <linux/i3c/master.h>
 
 #include <linux/i3c/i3cdev.h>
 
@@ -289,11 +290,41 @@ static const struct file_operations i3cdev_fops = {
 
 static struct class *i3cdev_class;
 
+#ifdef CONFIG_I3C_IBI_TEST
+#define MSG_BUF_SIZE 8
+static const struct i3c_device_id ibi_test_i3c_ids[] = {
+	I3C_DEVICE(0x0319, 0x0, (void *)0),
+	I3C_DEVICE(0x0104, 0x006C, (void *)0),
+	I3C_DEVICE(0x3f6, 0x8000, (void *)0),
+	I3C_DEVICE(0x3f6, 0x8001, (void *)0),
+	{ /* sentinel */ },
+};
+
+static void npcm8xx_test_ibi_handler(struct i3c_device *i3cdev,
+				    const struct i3c_ibi_payload *payload)
+{
+	char *buf;
+	int i;
+
+	dev_info(&i3cdev->dev, "handle ibi, payload len %d\n", payload->len);
+
+	if (payload->len <= MSG_BUF_SIZE) {
+		buf = (char *)payload->data;
+		for (i = 0; i < payload->len; i++)
+			printk("%02x ", buf[i]);
+		printk("\n");
+	}
+}
+#endif
+
 static int i3cdev_attach(struct device *dev, void *dummy)
 {
 	struct i3cdev_data *i3cdev;
 	struct i3c_device *i3c;
 	int res;
+#ifdef CONFIG_I3C_IBI_TEST
+	struct i3c_ibi_setup ibireq = {};
+#endif
 
 	if (dev->type == &i3c_masterdev_type || dev->driver)
 		return 0;
@@ -322,6 +353,17 @@ static int i3cdev_attach(struct device *dev, void *dummy)
 	}
 	pr_debug("i3cdev: I3C device [%s] registered as minor %d\n",
 		 dev_name(&i3c->dev), i3cdev->id);
+#ifdef CONFIG_I3C_IBI_TEST
+	if (i3c_device_match_id(i3c, ibi_test_i3c_ids)) {
+		dev_info(&i3c->dev, "enable IBI\n");
+		/* enable IBI */
+		ibireq.handler = npcm8xx_test_ibi_handler;
+		ibireq.max_payload_len = MSG_BUF_SIZE;
+		ibireq.num_slots = 1;
+		i3c_device_request_ibi(i3c, &ibireq);
+		i3c_device_enable_ibi(i3c);
+	}
+#endif
 	return 0;
 
 error:
-- 
2.17.1

