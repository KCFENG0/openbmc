From 8d8ad0fc57642a468ede54d25fcd01057902bcfa Mon Sep 17 00:00:00 2001
From: Mia Lin <mimi05633@gmail.com>
Date: Mon, 10 Jul 2023 18:30:32 +0800
Subject: [PATCH 2/2] driver: misc: nuvoton: vdm: support openbmc libmctp

Signed-off-by: Mia Lin <mimi05633@gmail.com>
---
 drivers/misc/npcm-vdm/vdm_common.c | 17 ++++++++++++-----
 drivers/misc/npcm-vdm/vdm_module.c | 25 ++++++++++++++++++++++++-
 2 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/drivers/misc/npcm-vdm/vdm_common.c b/drivers/misc/npcm-vdm/vdm_common.c
index b03b07be9135..bfcbce98ec3b 100644
--- a/drivers/misc/npcm-vdm/vdm_common.c
+++ b/drivers/misc/npcm-vdm/vdm_common.c
@@ -4,7 +4,6 @@
  *
  *
  ****************************************************/
-
 #include <linux/types.h> /* size_t */
 #include <linux/delay.h>
 #include <linux/version.h>
@@ -16,6 +15,8 @@
 #include "vdm_api.h"
 #include "CircularBuffer.h"
 
+#define FULL_PCIE_VDM_HEADER
+
 extern void __iomem *vdm_virt_addr;
 extern void __iomem *vdma_virt_addr;
 extern struct regmap *gcr_regmap;
@@ -262,12 +263,17 @@ int vdm_SendMessage(uint8_t route_type, uint16_t aBDF,uint8_t  *apData,uint32_t
 {
 	uint32_t 	i,txData;
 	uint8_t     idx;
+#ifndef FULL_PCIE_VDM_HEADER
 	uint8_t 	tag,paddingBytesNum;
+#endif
 	uint8_t 	currLength;
+#ifndef FULL_PCIE_VDM_HEADER
 	uint32_t pci_message_header[4]={0};
+#endif
 
 	ready_for_transmit=0;
 
+#ifndef FULL_PCIE_VDM_HEADER
 	pci_message_header[0]=
 			// ( ( ((1) << 5)+ ( (0x13/*1 0011 (broadcasting) */) << 0)) << 0) + // fmt + type . filled dynamically
 			( ( ( PCIe_TC0 << 4)+  (PCIe_NO_IDO << 2) +  	// TC + atr[2]
@@ -288,6 +294,7 @@ int vdm_SendMessage(uint8_t route_type, uint16_t aBDF,uint8_t  *apData,uint32_t
 			// ( ( (0 << 3) + (0 << 0) ) << 8) + // dev_num + func_num (reserved in broadcasting) . filled dynamically
 			( ( (VDM_VENDOR_ID >> 8) & 0xff) << 16) +// vendor id msb
 			( ( VDM_VENDOR_ID & 0xff ) << 24 ) ;// vendor id lsb
+#endif
 
 //	PRINTF("<1>vdm:vdm_SendMessage \n"  );
 
@@ -304,6 +311,7 @@ int vdm_SendMessage(uint8_t route_type, uint16_t aBDF,uint8_t  *apData,uint32_t
 		}
 		aLength-=currLength;
 
+#ifndef FULL_PCIE_VDM_HEADER
 		paddingBytesNum =  ( currLength % 4);
 		if ( 0 != paddingBytesNum )
 		{
@@ -351,6 +359,7 @@ int vdm_SendMessage(uint8_t route_type, uint16_t aBDF,uint8_t  *apData,uint32_t
 		iowrite32(pci_message_header[0], vdm_virt_addr + VDM_TXF_REG);
 		iowrite32(pci_message_header[1], vdm_virt_addr + VDM_TXF_REG);
 		iowrite32(pci_message_header[2], vdm_virt_addr + VDM_TXF_REG);
+#endif
 
 		while(currLength >3 )
 		{
@@ -360,7 +369,6 @@ int vdm_SendMessage(uint8_t route_type, uint16_t aBDF,uint8_t  *apData,uint32_t
 			currLength-=4;
 		}
 
-
 		txData=0;
         idx=0;
 		while(currLength)
@@ -386,7 +394,6 @@ int vdm_SendMessage(uint8_t route_type, uint16_t aBDF,uint8_t  *apData,uint32_t
 		//txData = txData << (paddingBytesNum*8);
 		iowrite32(txData, vdm_virt_addr + VDM_TXF_REG);
 
-
         //Check if VDM Module is Enabled Before TX START
         if(read_reg_bit(VDM_CNT_REG_VDM_ENABLE_BIT_POS, vdm_virt_addr + VDM_CNT_REG))
             set_reg_bit(VDM_CNT_REG_START_TX_BIT, vdm_virt_addr + VDM_CNT_REG);
@@ -403,7 +410,7 @@ int vdm_SendMessage(uint8_t route_type, uint16_t aBDF,uint8_t  *apData,uint32_t
 		// test VDM_CNT_REG_VDM_ENABLE_BIT_POS to see that PCIe bus was not reset
 		for (i=0 ; i< SEND_TIMEOUT; i++)
 		{
-			if((read_reg_bit(VDM_TX_DONE_BIT_POS, vdm_virt_addr + VDM_STAT_REG) == 1) || vdm_is_in_reset())
+			if((read_reg_bit(VDM_CNT_REG_START_TX_BIT, vdm_virt_addr + VDM_CNT_REG) == 0) || vdm_is_in_reset())
 				break;
 			else
 #ifndef CONFIG_ARM64
@@ -550,7 +557,7 @@ int vdm_init_common(uint32_t *apVdma_rx_buff,uint32_t *apVdma_rx_buff_virt_addr,
 	/*************************************************/
 	iowrite32(0x00, vdma_virt_addr + VDMA_CNT_REG);// disable
 
-	iowrite32(PHYS_VDM_RXF_REG_ADDR, vdma_virt_addr + VDMA_SRCB_REG);// src_addr
+	iowrite32(PHYS_VDM_STAT_REG_ADDR + VDM_RXF_REG_ADDR, vdma_virt_addr + VDMA_SRCB_REG);// src_addr
 
 	iowrite32((uint32_t)apVdma_rx_buff, vdma_virt_addr + VDMA_DSTB_REG);// dst_addr
 
diff --git a/drivers/misc/npcm-vdm/vdm_module.c b/drivers/misc/npcm-vdm/vdm_module.c
index 6f685cfdfc36..4b49e0f52b19 100644
--- a/drivers/misc/npcm-vdm/vdm_module.c
+++ b/drivers/misc/npcm-vdm/vdm_module.c
@@ -34,6 +34,8 @@
 #define VDM_DEBUG_ENABLE            1
 #define VDM_DEBUG_DISABLE           0
 
+#define FULL_PCIE_VDM_HEADER
+
 struct regmap *gcr_regmap;
 void __iomem *vdm_virt_addr;
 void __iomem *vdma_virt_addr;
@@ -284,12 +286,14 @@ static ssize_t vdm_read(struct file *filp, char *buf, size_t count, loff_t *f_po
 	while(1)
 	{
 		spin_lock_irqsave(&lock, flags);
+#ifndef FULL_PCIE_VDM_HEADER
 		if(0 == pVDM_Instance->BDF_is_set)
 		{
 			ret = -ENOENT  ;
 			VDM_DEBUG_LOG(tBDF,"BDF was not set for given pVDM Instance\n");
 			goto unlock_and_exit;
 		}
+#endif
 
 		if (vdm_is_in_reset())
 		{
@@ -385,8 +389,11 @@ static ssize_t vdm_write( struct file *filp, const char *buf, size_t count, loff
 		goto failed;
 	}
 	//pr_debug("<1> vdm module write start  \n");
-
+#ifdef FULL_PCIE_VDM_HEADER
+	if(count > pVDM_Instance->mptxBufferLength)
+#else
 	if((count-1) > pVDM_Instance->mptxBufferLength)
+#endif
 	{
 		VDM_DEBUG_LOG(tBDF,"vdm module data length is too big\n");
 		ret = -EINVAL;
@@ -399,13 +406,18 @@ static ssize_t vdm_write( struct file *filp, const char *buf, size_t count, loff
 		goto failed;
 	}
 
+#ifdef FULL_PCIE_VDM_HEADER
+	if(copy_from_user(pVDM_Instance->mptxBuffer, buf, count))
+#else
 	if(copy_from_user( pVDM_Instance->mptxBuffer , &buf[1] , count-1))
+#endif
 	{
 		ret = -EFAULT;
                 VDM_DEBUG_LOG(tBDF,"Failed for copying data from user\n");
 		goto failed;
 	}
 
+#ifndef FULL_PCIE_VDM_HEADER
 	if(0 == pVDM_Instance->BDF_is_set)
 	{
 		ret = -ENOENT  ;
@@ -427,8 +439,13 @@ static ssize_t vdm_write( struct file *filp, const char *buf, size_t count, loff
 	}
 
         VDM_DEBUG_LOG(tBDF,"Before writing data route_type %d BDF 0x%X and count %d\n",route_type,pVDM_Instance->mBDF,count );
+#endif
 
+#ifdef FULL_PCIE_VDM_HEADER
+	if (0 == vdm_SendMessage(route_type, pVDM_Instance->mBDF, pVDM_Instance->mptxBuffer, count))
+#else
 	if (0 == vdm_SendMessage(route_type , pVDM_Instance->mBDF , pVDM_Instance->mptxBuffer,count-1))
+#endif
 		ret = count;
         else
                VDM_DEBUG_LOG(tBDF,"Failed to send message \n");
@@ -613,6 +630,7 @@ static int vdm_open(struct inode *inode, struct file *filp)
 	}
 
 	memset(pVDM_Instance,0,sizeof(vdm_instance_t));
+	pVDM_Instance_Default = pVDM_Instance;
 	pVDM_Instance->BDF_is_set = 0;
 	pVDM_Instance->last_errors = 0;
 	pVDM_Instance->dbg_counter = 0;
@@ -1126,6 +1144,11 @@ static int vdm_init(void)
 		if (IS_ERR(gcr_regmap)) {
 			pr_info("Failed to find nuvoton,npcm750-gcr WD reset status not supported\n");
 		}
+	} else if (of_device_is_compatible(np, "nuvoton,npcm845-vdm")) {
+		gcr_regmap = syscon_regmap_lookup_by_compatible("nuvoton,npcm845-gcr");
+		if (IS_ERR(gcr_regmap)) {
+			pr_info("Failed to find nuvoton,npcm845-gcr WD reset status not supported\n");
+		}
 	} else {
 		gcr_regmap = NULL;
 	}
-- 
2.17.1
