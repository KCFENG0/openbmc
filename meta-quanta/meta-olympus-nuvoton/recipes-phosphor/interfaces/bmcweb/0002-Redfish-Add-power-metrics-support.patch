From b77ab9523ca47323a7757ed0fad8d4590c10aa22 Mon Sep 17 00:00:00 2001
From: Eason Yang <yhyang2@nuvoton.com>
Date: Wed, 8 Feb 2023 14:54:34 +0800
Subject: [PATCH 2/3] Redfish Add power metrics support

Signed-off-by: Eason Yang <yhyang2@nuvoton.com>
---
 redfish-core/lib/power.hpp | 75 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 75 insertions(+)

diff --git a/redfish-core/lib/power.hpp b/redfish-core/lib/power.hpp
index 116ea256c..1c91b9418 100644
--- a/redfish-core/lib/power.hpp
+++ b/redfish-core/lib/power.hpp
@@ -288,6 +288,81 @@ inline void requestRoutesPower(App& app)
                     sensorJson["PowerLimit"]["LimitInWatts"] =
                         powerCap * std::pow(10, scale);
                 }
+
+                auto PowerMetricHandler =
+                [sensorAsyncResp](
+                    const boost::system::error_code ec2,
+                    const std::vector<std::pair<std::string, dbus::utility::DbusVariantType>>&
+                        properties2) {
+                    if (ec2)
+                    {
+                        messages::internalError(sensorAsyncResp->asyncResp->res);
+                        BMCWEB_LOG_ERROR
+                            << "Power Metric GetAll handler: Dbus error " << ec2;
+                        return;
+                    }
+                    nlohmann::json& tempArray2 =
+                        sensorAsyncResp->asyncResp->res.jsonValue["PowerControl"];
+                    nlohmann::json& sensorJson2 = tempArray2.back();
+                    for (const std::pair<std::string, dbus::utility::DbusVariantType>& property :
+                        properties2)
+                    {
+                        if (!property.first.compare("IntervalInMin"))
+                        {
+                            const uint64_t* i =
+                            std::get_if<uint64_t>(
+                                &property.second);
+
+                            if (i)
+                            {
+                                nlohmann::json& value2 =
+                                    sensorJson2["PowerMetrics"]["IntervalInMin"];
+                                value2 = *i;
+                            }
+                        }
+                        else if (!property.first.compare("MinConsumedWatts"))
+                        {
+                            const uint16_t* i =
+                            std::get_if<uint16_t>(
+                                &property.second);
+                            if (i)
+                            {
+                                nlohmann::json& value2 =
+                                    sensorJson2["PowerMetrics"]["MinConsumedWatts"];
+                                value2 = *i;
+                            }
+                        }
+                        else if (!property.first.compare("MaxConsumedWatts"))
+                        {
+                            const uint16_t* i =
+                            std::get_if<uint16_t>(
+                                &property.second);
+                            if (i)
+                            {
+                                nlohmann::json& value2 =
+                                    sensorJson2["PowerMetrics"]["MaxConsumedWatts"];
+                                value2 = *i;
+                            }
+                        }
+                        else if (!property.first.compare("AverageConsumedWatts"))
+                        {
+                            const uint16_t* i =
+                            std::get_if<uint16_t>(
+                                &property.second);
+                            if (i)
+                            {
+                                nlohmann::json& value2 =
+                                    sensorJson2["PowerMetrics"]["AverageConsumedWatts"];
+                                value2 = *i;
+                            }
+                        }
+                    }
+                };
+                crow::connections::systemBus->async_method_call(
+                    std::move(PowerMetricHandler), "xyz.openbmc_project.NodeManagerProxy",
+                    "/xyz/openbmc_project/Power/PowerMetric",
+                    "org.freedesktop.DBus.Properties", "GetAll",
+                    "xyz.openbmc_project.Power.PowerMetric");
             };
 
             sdbusplus::asio::getAllProperties(
-- 
2.34.1

